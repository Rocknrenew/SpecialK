// This JLex file was machine-generated by the BNF converter
package com.biosimilarity.lift.lib.kvdbJSON;
import java_cup.runtime.*;


public class Yylex implements java_cup.runtime.Scanner {
	private final int YY_BUFFER_SIZE = 512;
	private final int YY_F = -1;
	private final int YY_NO_STATE = -1;
	private final int YY_NOT_ACCEPT = 0;
	private final int YY_START = 1;
	private final int YY_END = 2;
	private final int YY_NO_ANCHOR = 4;
	private final int YY_BOL = 65536;
	private final int YY_EOF = 65537;

  String pstring = new String();
  public int line_num() { return (yyline+1); }
  public String buff() { return new String(yy_buffer,yy_buffer_index,10).trim(); }
	private java.io.BufferedReader yy_reader;
	private int yy_buffer_index;
	private int yy_buffer_read;
	private int yy_buffer_start;
	private int yy_buffer_end;
	private char yy_buffer[];
	private int yyline;
	private boolean yy_at_bol;
	private int yy_lexical_state;

	public Yylex (java.io.Reader reader) {
		this ();
		if (null == reader) {
			throw (new Error("Error: Bad input stream initializer."));
		}
		yy_reader = new java.io.BufferedReader(reader);
	}

	public Yylex (java.io.InputStream instream) {
		this ();
		if (null == instream) {
			throw (new Error("Error: Bad input stream initializer."));
		}
		yy_reader = new java.io.BufferedReader(new java.io.InputStreamReader(instream));
	}

	private Yylex () {
		yy_buffer = new char[YY_BUFFER_SIZE];
		yy_buffer_read = 0;
		yy_buffer_index = 0;
		yy_buffer_start = 0;
		yy_buffer_end = 0;
		yyline = 0;
		yy_at_bol = true;
		yy_lexical_state = YYINITIAL;
	}

	private boolean yy_eof_done = false;
	private final int STRING = 5;
	private final int ESCAPED = 6;
	private final int YYINITIAL = 0;
	private final int COMMENT = 1;
	private final int CHAREND = 4;
	private final int CHARESC = 3;
	private final int CHAR = 2;
	private final int yy_state_dtrans[] = {
		0,
		189,
		189,
		189,
		189,
		190,
		191
	};
	private void yybegin (int state) {
		yy_lexical_state = state;
	}
	private int yy_advance ()
		throws java.io.IOException {
		int next_read;
		int i;
		int j;

		if (yy_buffer_index < yy_buffer_read) {
			return yy_buffer[yy_buffer_index++];
		}

		if (0 != yy_buffer_start) {
			i = yy_buffer_start;
			j = 0;
			while (i < yy_buffer_read) {
				yy_buffer[j] = yy_buffer[i];
				++i;
				++j;
			}
			yy_buffer_end = yy_buffer_end - yy_buffer_start;
			yy_buffer_start = 0;
			yy_buffer_read = j;
			yy_buffer_index = j;
			next_read = yy_reader.read(yy_buffer,
					yy_buffer_read,
					yy_buffer.length - yy_buffer_read);
			if (-1 == next_read) {
				return YY_EOF;
			}
			yy_buffer_read = yy_buffer_read + next_read;
		}

		while (yy_buffer_index >= yy_buffer_read) {
			if (yy_buffer_index >= yy_buffer.length) {
				yy_buffer = yy_double(yy_buffer);
			}
			next_read = yy_reader.read(yy_buffer,
					yy_buffer_read,
					yy_buffer.length - yy_buffer_read);
			if (-1 == next_read) {
				return YY_EOF;
			}
			yy_buffer_read = yy_buffer_read + next_read;
		}
		return yy_buffer[yy_buffer_index++];
	}
	private void yy_move_end () {
		if (yy_buffer_end > yy_buffer_start &&
		    '\n' == yy_buffer[yy_buffer_end-1])
			yy_buffer_end--;
		if (yy_buffer_end > yy_buffer_start &&
		    '\r' == yy_buffer[yy_buffer_end-1])
			yy_buffer_end--;
	}
	private boolean yy_last_was_cr=false;
	private void yy_mark_start () {
		int i;
		for (i = yy_buffer_start; i < yy_buffer_index; ++i) {
			if ('\n' == yy_buffer[i] && !yy_last_was_cr) {
				++yyline;
			}
			if ('\r' == yy_buffer[i]) {
				++yyline;
				yy_last_was_cr=true;
			} else yy_last_was_cr=false;
		}
		yy_buffer_start = yy_buffer_index;
	}
	private void yy_mark_end () {
		yy_buffer_end = yy_buffer_index;
	}
	private void yy_to_mark () {
		yy_buffer_index = yy_buffer_end;
		yy_at_bol = (yy_buffer_end > yy_buffer_start) &&
		            ('\r' == yy_buffer[yy_buffer_end-1] ||
		             '\n' == yy_buffer[yy_buffer_end-1] ||
		             2028/*LS*/ == yy_buffer[yy_buffer_end-1] ||
		             2029/*PS*/ == yy_buffer[yy_buffer_end-1]);
	}
	private java.lang.String yytext () {
		return (new java.lang.String(yy_buffer,
			yy_buffer_start,
			yy_buffer_end - yy_buffer_start));
	}
	private int yylength () {
		return yy_buffer_end - yy_buffer_start;
	}
	private char[] yy_double (char buf[]) {
		int i;
		char newbuf[];
		newbuf = new char[2*buf.length];
		for (i = 0; i < buf.length; ++i) {
			newbuf[i] = buf[i];
		}
		return newbuf;
	}
	private final int YY_E_INTERNAL = 0;
	private final int YY_E_MATCH = 1;
	private java.lang.String yy_error_string[] = {
		"Error: Internal error.\n",
		"Error: Unmatched input.\n"
	};
	private void yy_error (int code,boolean fatal) {
		java.lang.System.out.print(yy_error_string[code]);
		java.lang.System.out.flush();
		if (fatal) {
			throw new Error("Fatal Error.\n");
		}
	}
	private int[][] unpackFromString(int size1, int size2, String st) {
		int colonIndex = -1;
		String lengthString;
		int sequenceLength = 0;
		int sequenceInteger = 0;

		int commaIndex;
		String workString;

		int res[][] = new int[size1][size2];
		for (int i= 0; i < size1; i++) {
			for (int j= 0; j < size2; j++) {
				if (sequenceLength != 0) {
					res[i][j] = sequenceInteger;
					sequenceLength--;
					continue;
				}
				commaIndex = st.indexOf(',');
				workString = (commaIndex==-1) ? st :
					st.substring(0, commaIndex);
				st = st.substring(commaIndex+1);
				colonIndex = workString.indexOf(':');
				if (colonIndex == -1) {
					res[i][j]=Integer.parseInt(workString);
					continue;
				}
				lengthString =
					workString.substring(colonIndex+1);
				sequenceLength=Integer.parseInt(lengthString);
				workString=workString.substring(0,colonIndex);
				sequenceInteger=Integer.parseInt(workString);
				res[i][j] = sequenceInteger;
				sequenceLength--;
			}
		}
		return res;
	}
	private int yy_acpt[] = {
		/* 0 */ YY_NOT_ACCEPT,
		/* 1 */ YY_NO_ANCHOR,
		/* 2 */ YY_NO_ANCHOR,
		/* 3 */ YY_NO_ANCHOR,
		/* 4 */ YY_NO_ANCHOR,
		/* 5 */ YY_NO_ANCHOR,
		/* 6 */ YY_NO_ANCHOR,
		/* 7 */ YY_NO_ANCHOR,
		/* 8 */ YY_NO_ANCHOR,
		/* 9 */ YY_NO_ANCHOR,
		/* 10 */ YY_NO_ANCHOR,
		/* 11 */ YY_NO_ANCHOR,
		/* 12 */ YY_NO_ANCHOR,
		/* 13 */ YY_NO_ANCHOR,
		/* 14 */ YY_NO_ANCHOR,
		/* 15 */ YY_NO_ANCHOR,
		/* 16 */ YY_NO_ANCHOR,
		/* 17 */ YY_NO_ANCHOR,
		/* 18 */ YY_NO_ANCHOR,
		/* 19 */ YY_NO_ANCHOR,
		/* 20 */ YY_NO_ANCHOR,
		/* 21 */ YY_NO_ANCHOR,
		/* 22 */ YY_NO_ANCHOR,
		/* 23 */ YY_NO_ANCHOR,
		/* 24 */ YY_NO_ANCHOR,
		/* 25 */ YY_NO_ANCHOR,
		/* 26 */ YY_NO_ANCHOR,
		/* 27 */ YY_NO_ANCHOR,
		/* 28 */ YY_NO_ANCHOR,
		/* 29 */ YY_NO_ANCHOR,
		/* 30 */ YY_NO_ANCHOR,
		/* 31 */ YY_NO_ANCHOR,
		/* 32 */ YY_NO_ANCHOR,
		/* 33 */ YY_NO_ANCHOR,
		/* 34 */ YY_NO_ANCHOR,
		/* 35 */ YY_NO_ANCHOR,
		/* 36 */ YY_NO_ANCHOR,
		/* 37 */ YY_NO_ANCHOR,
		/* 38 */ YY_NO_ANCHOR,
		/* 39 */ YY_NO_ANCHOR,
		/* 40 */ YY_NO_ANCHOR,
		/* 41 */ YY_NO_ANCHOR,
		/* 42 */ YY_NO_ANCHOR,
		/* 43 */ YY_NO_ANCHOR,
		/* 44 */ YY_NO_ANCHOR,
		/* 45 */ YY_NO_ANCHOR,
		/* 46 */ YY_NO_ANCHOR,
		/* 47 */ YY_NO_ANCHOR,
		/* 48 */ YY_NO_ANCHOR,
		/* 49 */ YY_NO_ANCHOR,
		/* 50 */ YY_NO_ANCHOR,
		/* 51 */ YY_NO_ANCHOR,
		/* 52 */ YY_NO_ANCHOR,
		/* 53 */ YY_NO_ANCHOR,
		/* 54 */ YY_NO_ANCHOR,
		/* 55 */ YY_NO_ANCHOR,
		/* 56 */ YY_NOT_ACCEPT,
		/* 57 */ YY_NO_ANCHOR,
		/* 58 */ YY_NO_ANCHOR,
		/* 59 */ YY_NO_ANCHOR,
		/* 60 */ YY_NO_ANCHOR,
		/* 61 */ YY_NOT_ACCEPT,
		/* 62 */ YY_NO_ANCHOR,
		/* 63 */ YY_NO_ANCHOR,
		/* 64 */ YY_NOT_ACCEPT,
		/* 65 */ YY_NO_ANCHOR,
		/* 66 */ YY_NOT_ACCEPT,
		/* 67 */ YY_NOT_ACCEPT,
		/* 68 */ YY_NOT_ACCEPT,
		/* 69 */ YY_NOT_ACCEPT,
		/* 70 */ YY_NOT_ACCEPT,
		/* 71 */ YY_NOT_ACCEPT,
		/* 72 */ YY_NOT_ACCEPT,
		/* 73 */ YY_NOT_ACCEPT,
		/* 74 */ YY_NOT_ACCEPT,
		/* 75 */ YY_NOT_ACCEPT,
		/* 76 */ YY_NOT_ACCEPT,
		/* 77 */ YY_NOT_ACCEPT,
		/* 78 */ YY_NOT_ACCEPT,
		/* 79 */ YY_NOT_ACCEPT,
		/* 80 */ YY_NOT_ACCEPT,
		/* 81 */ YY_NOT_ACCEPT,
		/* 82 */ YY_NOT_ACCEPT,
		/* 83 */ YY_NOT_ACCEPT,
		/* 84 */ YY_NOT_ACCEPT,
		/* 85 */ YY_NOT_ACCEPT,
		/* 86 */ YY_NOT_ACCEPT,
		/* 87 */ YY_NOT_ACCEPT,
		/* 88 */ YY_NOT_ACCEPT,
		/* 89 */ YY_NOT_ACCEPT,
		/* 90 */ YY_NOT_ACCEPT,
		/* 91 */ YY_NOT_ACCEPT,
		/* 92 */ YY_NOT_ACCEPT,
		/* 93 */ YY_NOT_ACCEPT,
		/* 94 */ YY_NOT_ACCEPT,
		/* 95 */ YY_NOT_ACCEPT,
		/* 96 */ YY_NOT_ACCEPT,
		/* 97 */ YY_NOT_ACCEPT,
		/* 98 */ YY_NOT_ACCEPT,
		/* 99 */ YY_NOT_ACCEPT,
		/* 100 */ YY_NOT_ACCEPT,
		/* 101 */ YY_NOT_ACCEPT,
		/* 102 */ YY_NOT_ACCEPT,
		/* 103 */ YY_NOT_ACCEPT,
		/* 104 */ YY_NOT_ACCEPT,
		/* 105 */ YY_NOT_ACCEPT,
		/* 106 */ YY_NOT_ACCEPT,
		/* 107 */ YY_NOT_ACCEPT,
		/* 108 */ YY_NOT_ACCEPT,
		/* 109 */ YY_NOT_ACCEPT,
		/* 110 */ YY_NOT_ACCEPT,
		/* 111 */ YY_NOT_ACCEPT,
		/* 112 */ YY_NOT_ACCEPT,
		/* 113 */ YY_NOT_ACCEPT,
		/* 114 */ YY_NOT_ACCEPT,
		/* 115 */ YY_NOT_ACCEPT,
		/* 116 */ YY_NOT_ACCEPT,
		/* 117 */ YY_NOT_ACCEPT,
		/* 118 */ YY_NOT_ACCEPT,
		/* 119 */ YY_NOT_ACCEPT,
		/* 120 */ YY_NOT_ACCEPT,
		/* 121 */ YY_NOT_ACCEPT,
		/* 122 */ YY_NOT_ACCEPT,
		/* 123 */ YY_NOT_ACCEPT,
		/* 124 */ YY_NOT_ACCEPT,
		/* 125 */ YY_NOT_ACCEPT,
		/* 126 */ YY_NOT_ACCEPT,
		/* 127 */ YY_NOT_ACCEPT,
		/* 128 */ YY_NOT_ACCEPT,
		/* 129 */ YY_NOT_ACCEPT,
		/* 130 */ YY_NOT_ACCEPT,
		/* 131 */ YY_NOT_ACCEPT,
		/* 132 */ YY_NOT_ACCEPT,
		/* 133 */ YY_NOT_ACCEPT,
		/* 134 */ YY_NOT_ACCEPT,
		/* 135 */ YY_NOT_ACCEPT,
		/* 136 */ YY_NOT_ACCEPT,
		/* 137 */ YY_NOT_ACCEPT,
		/* 138 */ YY_NOT_ACCEPT,
		/* 139 */ YY_NOT_ACCEPT,
		/* 140 */ YY_NOT_ACCEPT,
		/* 141 */ YY_NOT_ACCEPT,
		/* 142 */ YY_NOT_ACCEPT,
		/* 143 */ YY_NOT_ACCEPT,
		/* 144 */ YY_NOT_ACCEPT,
		/* 145 */ YY_NOT_ACCEPT,
		/* 146 */ YY_NOT_ACCEPT,
		/* 147 */ YY_NOT_ACCEPT,
		/* 148 */ YY_NOT_ACCEPT,
		/* 149 */ YY_NOT_ACCEPT,
		/* 150 */ YY_NOT_ACCEPT,
		/* 151 */ YY_NOT_ACCEPT,
		/* 152 */ YY_NOT_ACCEPT,
		/* 153 */ YY_NOT_ACCEPT,
		/* 154 */ YY_NOT_ACCEPT,
		/* 155 */ YY_NOT_ACCEPT,
		/* 156 */ YY_NOT_ACCEPT,
		/* 157 */ YY_NOT_ACCEPT,
		/* 158 */ YY_NOT_ACCEPT,
		/* 159 */ YY_NOT_ACCEPT,
		/* 160 */ YY_NOT_ACCEPT,
		/* 161 */ YY_NOT_ACCEPT,
		/* 162 */ YY_NOT_ACCEPT,
		/* 163 */ YY_NOT_ACCEPT,
		/* 164 */ YY_NOT_ACCEPT,
		/* 165 */ YY_NOT_ACCEPT,
		/* 166 */ YY_NOT_ACCEPT,
		/* 167 */ YY_NOT_ACCEPT,
		/* 168 */ YY_NOT_ACCEPT,
		/* 169 */ YY_NOT_ACCEPT,
		/* 170 */ YY_NOT_ACCEPT,
		/* 171 */ YY_NOT_ACCEPT,
		/* 172 */ YY_NOT_ACCEPT,
		/* 173 */ YY_NOT_ACCEPT,
		/* 174 */ YY_NOT_ACCEPT,
		/* 175 */ YY_NOT_ACCEPT,
		/* 176 */ YY_NOT_ACCEPT,
		/* 177 */ YY_NOT_ACCEPT,
		/* 178 */ YY_NOT_ACCEPT,
		/* 179 */ YY_NOT_ACCEPT,
		/* 180 */ YY_NOT_ACCEPT,
		/* 181 */ YY_NOT_ACCEPT,
		/* 182 */ YY_NOT_ACCEPT,
		/* 183 */ YY_NOT_ACCEPT,
		/* 184 */ YY_NOT_ACCEPT,
		/* 185 */ YY_NOT_ACCEPT,
		/* 186 */ YY_NOT_ACCEPT,
		/* 187 */ YY_NOT_ACCEPT,
		/* 188 */ YY_NOT_ACCEPT,
		/* 189 */ YY_NOT_ACCEPT,
		/* 190 */ YY_NOT_ACCEPT,
		/* 191 */ YY_NOT_ACCEPT,
		/* 192 */ YY_NO_ANCHOR,
		/* 193 */ YY_NO_ANCHOR,
		/* 194 */ YY_NO_ANCHOR,
		/* 195 */ YY_NOT_ACCEPT,
		/* 196 */ YY_NOT_ACCEPT,
		/* 197 */ YY_NOT_ACCEPT,
		/* 198 */ YY_NOT_ACCEPT,
		/* 199 */ YY_NOT_ACCEPT,
		/* 200 */ YY_NOT_ACCEPT,
		/* 201 */ YY_NOT_ACCEPT,
		/* 202 */ YY_NOT_ACCEPT,
		/* 203 */ YY_NOT_ACCEPT,
		/* 204 */ YY_NOT_ACCEPT,
		/* 205 */ YY_NOT_ACCEPT,
		/* 206 */ YY_NOT_ACCEPT,
		/* 207 */ YY_NOT_ACCEPT,
		/* 208 */ YY_NOT_ACCEPT,
		/* 209 */ YY_NOT_ACCEPT,
		/* 210 */ YY_NOT_ACCEPT,
		/* 211 */ YY_NOT_ACCEPT,
		/* 212 */ YY_NOT_ACCEPT,
		/* 213 */ YY_NOT_ACCEPT,
		/* 214 */ YY_NOT_ACCEPT,
		/* 215 */ YY_NOT_ACCEPT,
		/* 216 */ YY_NOT_ACCEPT,
		/* 217 */ YY_NOT_ACCEPT,
		/* 218 */ YY_NOT_ACCEPT,
		/* 219 */ YY_NOT_ACCEPT,
		/* 220 */ YY_NOT_ACCEPT,
		/* 221 */ YY_NOT_ACCEPT,
		/* 222 */ YY_NOT_ACCEPT,
		/* 223 */ YY_NOT_ACCEPT,
		/* 224 */ YY_NOT_ACCEPT,
		/* 225 */ YY_NOT_ACCEPT,
		/* 226 */ YY_NO_ANCHOR,
		/* 227 */ YY_NOT_ACCEPT,
		/* 228 */ YY_NOT_ACCEPT,
		/* 229 */ YY_NOT_ACCEPT,
		/* 230 */ YY_NOT_ACCEPT,
		/* 231 */ YY_NOT_ACCEPT,
		/* 232 */ YY_NOT_ACCEPT,
		/* 233 */ YY_NOT_ACCEPT,
		/* 234 */ YY_NOT_ACCEPT,
		/* 235 */ YY_NOT_ACCEPT,
		/* 236 */ YY_NOT_ACCEPT,
		/* 237 */ YY_NOT_ACCEPT,
		/* 238 */ YY_NOT_ACCEPT,
		/* 239 */ YY_NOT_ACCEPT,
		/* 240 */ YY_NOT_ACCEPT,
		/* 241 */ YY_NOT_ACCEPT,
		/* 242 */ YY_NO_ANCHOR,
		/* 243 */ YY_NOT_ACCEPT,
		/* 244 */ YY_NOT_ACCEPT,
		/* 245 */ YY_NOT_ACCEPT,
		/* 246 */ YY_NOT_ACCEPT,
		/* 247 */ YY_NOT_ACCEPT,
		/* 248 */ YY_NO_ANCHOR,
		/* 249 */ YY_NO_ANCHOR,
		/* 250 */ YY_NO_ANCHOR,
		/* 251 */ YY_NOT_ACCEPT,
		/* 252 */ YY_NOT_ACCEPT,
		/* 253 */ YY_NOT_ACCEPT,
		/* 254 */ YY_NOT_ACCEPT,
		/* 255 */ YY_NOT_ACCEPT,
		/* 256 */ YY_NOT_ACCEPT,
		/* 257 */ YY_NOT_ACCEPT,
		/* 258 */ YY_NOT_ACCEPT,
		/* 259 */ YY_NOT_ACCEPT,
		/* 260 */ YY_NOT_ACCEPT,
		/* 261 */ YY_NO_ANCHOR,
		/* 262 */ YY_NOT_ACCEPT,
		/* 263 */ YY_NO_ANCHOR,
		/* 264 */ YY_NO_ANCHOR,
		/* 265 */ YY_NO_ANCHOR,
		/* 266 */ YY_NO_ANCHOR,
		/* 267 */ YY_NOT_ACCEPT,
		/* 268 */ YY_NOT_ACCEPT,
		/* 269 */ YY_NOT_ACCEPT,
		/* 270 */ YY_NOT_ACCEPT,
		/* 271 */ YY_NOT_ACCEPT,
		/* 272 */ YY_NOT_ACCEPT,
		/* 273 */ YY_NOT_ACCEPT,
		/* 274 */ YY_NOT_ACCEPT,
		/* 275 */ YY_NOT_ACCEPT,
		/* 276 */ YY_NOT_ACCEPT,
		/* 277 */ YY_NOT_ACCEPT,
		/* 278 */ YY_NO_ANCHOR,
		/* 279 */ YY_NO_ANCHOR,
		/* 280 */ YY_NOT_ACCEPT,
		/* 281 */ YY_NOT_ACCEPT,
		/* 282 */ YY_NOT_ACCEPT,
		/* 283 */ YY_NOT_ACCEPT,
		/* 284 */ YY_NOT_ACCEPT,
		/* 285 */ YY_NOT_ACCEPT,
		/* 286 */ YY_NOT_ACCEPT,
		/* 287 */ YY_NOT_ACCEPT,
		/* 288 */ YY_NOT_ACCEPT,
		/* 289 */ YY_NOT_ACCEPT,
		/* 290 */ YY_NO_ANCHOR,
		/* 291 */ YY_NOT_ACCEPT,
		/* 292 */ YY_NOT_ACCEPT,
		/* 293 */ YY_NOT_ACCEPT,
		/* 294 */ YY_NOT_ACCEPT,
		/* 295 */ YY_NOT_ACCEPT,
		/* 296 */ YY_NOT_ACCEPT,
		/* 297 */ YY_NOT_ACCEPT,
		/* 298 */ YY_NOT_ACCEPT,
		/* 299 */ YY_NOT_ACCEPT,
		/* 300 */ YY_NOT_ACCEPT,
		/* 301 */ YY_NOT_ACCEPT,
		/* 302 */ YY_NOT_ACCEPT,
		/* 303 */ YY_NOT_ACCEPT,
		/* 304 */ YY_NOT_ACCEPT,
		/* 305 */ YY_NOT_ACCEPT,
		/* 306 */ YY_NOT_ACCEPT,
		/* 307 */ YY_NOT_ACCEPT,
		/* 308 */ YY_NOT_ACCEPT,
		/* 309 */ YY_NOT_ACCEPT,
		/* 310 */ YY_NOT_ACCEPT,
		/* 311 */ YY_NOT_ACCEPT,
		/* 312 */ YY_NOT_ACCEPT,
		/* 313 */ YY_NOT_ACCEPT,
		/* 314 */ YY_NOT_ACCEPT,
		/* 315 */ YY_NOT_ACCEPT,
		/* 316 */ YY_NOT_ACCEPT,
		/* 317 */ YY_NOT_ACCEPT,
		/* 318 */ YY_NOT_ACCEPT
	};
	private int yy_cmap[] = unpackFromString(1,65538,
"41:9,45,46,41,45,46,41:18,45,41,4,41,36,41:7,2,43,35,34,39:10,11,41:6,42,24" +
",42:2,20,42,37,23,37:9,18,37:8,15,44,16,41,40,41,7,12,29,8,6,32,30,5,33,38," +
"25,28,21,26,13,22,19,9,10,17,31,38,27,38,14,38,1,41,3,41:66,37:23,41,37:7,3" +
"8:24,41,38:8,41:65280,0:2")[0];

	private int yy_rmap[] = unpackFromString(1,319,
"0,1:4,2,3,1:3,4,1:2,5,6,1,7,1:2,3:2,1,3,1:33,8,9,10,11,12,13,14,15,16,17,18" +
",19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43" +
",44,45,46,47,48,49,50,51,52,12,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67" +
",68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92" +
",93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,1" +
"13,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131," +
"132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150" +
",151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,16" +
"9,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,1" +
"88,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206," +
"207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225" +
",226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,24" +
"4,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,2" +
"63,264,265,266,267,268,269")[0];

	private int yy_nxt[][] = unpackFromString(270,47,
"1,2,3,4,5,6:6,7,6:3,8,9,248,10,6,290,6:2,10,290,6,261,6:5,264,6,11,12,-1,10" +
",6,13,14,-1,290,-1:2,15:2,-1:52,56,-1,61,-1,195,64,-1,66,67,-1:3,227,-1:4,6" +
"8,-1:3,196,-1:3,243,-1,247,-1:3,69,-1:15,6:6,-1,6:3,-1:2,6:17,-1:3,6:4,-1,6" +
",-1:9,10:6,-1,10:3,-1:2,10:17,-1:3,10:4,-1,10,-1:24,70,-1:3,70,-1:10,71,-1:" +
"3,279,-1:2,70,-1:5,14:45,-1:7,94,-1:32,16,-1:13,72,-1:45,6,19,6:4,-1,6:3,-1" +
":2,6:17,-1:3,6:4,-1,6,-1:9,10:6,-1,10:3,-1:2,10:17,-1:3,10:4,-1,10,275,-1:3" +
"8,71,-1:3,63,-1:3,275,-1:42,60,-1:17,197,-1:15,73,-1:2,229,-1:22,6:6,-1,6:3" +
",-1:2,6:11,20,6:5,-1:3,6:4,-1,6,-1:39,71,-1:3,63,-1:24,228,-1:13,75,-1:20,6" +
",22,6:4,-1,6:3,-1:2,6:17,-1:3,6:4,-1,6,-1:17,76,-1:58,77,-1:52,79,-1:33,81," +
"-1,81,-1:2,81:2,-1:12,81,-1:4,81,-1:24,267,-1:3,267,-1:14,267,-1:2,267,-1:4" +
"3,16,-1:14,199,-1:49,83,-1:46,85,-1:8,86,-1:39,88,-1:42,89,-1:42,17,-1:52,2" +
"44,-1:17,90,-1:30,201,-1:4,91,-1:46,92,-1:33,18,81:6,-1,81:3,-1:2,81:17,-1:" +
"3,81:4,-1,81,-1:8,21,-1:69,252,-1:45,203,-1:42,232,-1:55,205,-1:24,233,-1:4" +
"7,204,-1:50,96,-1:60,97,-1:36,245,-1:41,99,-1:62,100,-1:56,60,-1:3,101,-1:9" +
",102,-1:44,23,-1:46,24,-1:75,207,-1:38,109,-1:26,291,-1:50,235,-1:64,112,-1" +
":45,246,-1:30,113,-1:54,114,-1:34,116,-1:3,117,-1:46,209,-1:8,119,-1:31,25," +
"-1:85,275,-1:7,26,-1:70,208,-1:35,121,-1:35,122,-1:73,123,-1:32,124,-1:49,3" +
"09,-1:29,125,-1:72,127,-1:19,27,-1:46,28,-1:52,130,-1:8,131,-1:39,210,-1:54" +
",132,-1:44,237,-1:41,133,-1:39,134,-1:48,135,-1:42,29,-1:64,136,-1:55,137,-" +
"1:36,139,-1:51,212,-1:30,141,-1:66,238,-1:29,143,-1:39,215,-1:58,144,-1:50," +
"239,-1:34,145,-1:8,146,-1:44,147,-1:39,240,-1:62,217,-1:26,152,-1:62,154,-1" +
":55,155,-1:19,30,-1:46,31,-1:52,218,-1:40,32,-1:59,158,-1:39,159,-1:8,160,-" +
"1:41,161,-1:45,162,-1:39,163,-1:44,33,-1:46,34,-1:46,35,-1:64,167,-1:55,221" +
",-1:38,168,222,-1:48,220,-1:30,169,-1:42,170,-1:44,36,-1:46,37,-1:55,171,-1" +
":41,173,-1:55,176,-1:33,38,-1:68,223,-1:30,177,-1:45,178,-1:45,179,-1:44,18" +
"0,-1:44,39,-1:59,182,-1:39,183,-1:50,184,-1:36,40,-1:48,187,-1:44,41,-1:46," +
"42,-1:46,43,-1:46,44,-1:46,45,-1:46,46,-1:62,47,-1:3,47,-1:14,47,-1:2,47,-1" +
":4,1,-1:46,1,48:3,49,48:39,50,48,-1,1,51:3,52,51:12,53,51:8,54,51:17,55,51," +
"-1:6,6:6,-1,6:3,-1:2,6:14,57,6:2,-1:3,6:4,-1,6,-1:9,10:6,-1,10:3,-1:2,10:3," +
"58,10:3,58,10:9,-1:3,10:2,58,10,-1,58,-1:24,110,-1:3,110,-1:10,71,-1:3,59,-" +
"1:2,110,-1:10,74,-1:53,80,-1:58,82,-1:41,110,-1:3,110,-1:14,110,-1:2,110,-1" +
":12,95,-1:55,280,-1:57,98,-1:36,107,-1:41,103,-1:62,234,-1:23,105,-1:49,111" +
",-1:47,118,-1:42,128,-1:62,126,-1:30,138,-1:66,142,-1:30,216,-1:42,149,-1:5" +
"7,148,-1:39,151,-1:42,156,-1:50,219,-1:53,165,-1:35,166,-1:50,175,-1:42,172" +
",-1:53,174,-1:43,181,-1:46,185,-1:50,186,-1:37,6:6,-1,6:3,-1:2,6:11,62,6:5," +
"-1:3,6:4,-1,6,-1:10,78,-1:53,87,-1:58,84,-1:41,188,-1:3,188,-1:14,188,-1:2," +
"188,-1:21,93,-1:42,104,-1:39,106,-1:49,115,-1:47,120,-1:42,129,-1:46,140,-1" +
":46,150,-1:57,153,-1:35,157,-1:50,164,-1:41,6:5,65,-1,6:3,-1:2,6:17,-1:3,6:" +
"4,-1,6,-1:10,200,-1:57,202,-1:35,108,-1:50,236,-1:42,231,-1:45,6:4,192,6,-1" +
",6:3,-1:2,6:17,-1:3,6:4,-1,6,-1:9,10:6,-1,10:3,-1:2,10:3,193,10:3,193,10:9," +
"-1:3,10:2,193,10,-1,193,-1:24,198,-1:3,198,-1:10,71,-1:3,194,-1:2,198,-1:24" +
",198,-1:3,198,-1:14,198,-1:2,198,-1:10,206,-1:53,211,-1:64,213,-1:25,214,-1" +
":62,241,-1:29,224,-1:45,225,-1:60,253,-1:37,258,-1:38,6:6,-1,6:3,-1:2,6:14," +
"226,6:2,-1:3,6:4,-1,6,-1:24,230,-1:3,230,-1:14,230,-1:2,230,-1:9,6:6,-1,6:3" +
",-1:2,6:11,242,6:5,-1:3,6:4,-1,6,-1:9,6:2,263,6:3,-1,6:3,-1:2,6:17,-1:3,6:4" +
",-1,6,-1:9,10:6,-1,10:3,-1:2,10:3,249,10:3,249,10:9,-1:3,10:2,249,10,-1,249" +
",-1:24,251,-1:3,251,-1:10,71,-1:3,250,-1:2,251,-1:24,251,-1:3,251,-1:14,251" +
",-1:2,251,-1:14,259,-1:8,282,-1:37,283,-1:8,254,-1:33,255,-1:53,256,-1:56,2" +
"73,260,-1:30,257,-1:44,268,-1:60,286,-1:3,286,-1:14,286,-1:2,286,-1:24,296," +
"-1:3,296,-1:14,296,-1:2,296,-1:24,262,-1:3,262,-1:14,262,-1:2,262,-1:9,10:6" +
",-1,10:3,-1:2,10:3,265,10:3,265,10:9,-1:3,10:2,265,10,-1,265,-1:24,267,-1:3" +
",267,-1:10,71,-1:3,266,-1:2,267,-1:22,274,-1:34,269,-1:71,270,-1:37,271,-1:" +
"38,272,-1:49,284,-1:49,276,-1:3,276,-1:14,276,-1:2,276,-1:24,318,-1:3,318,-" +
"1:14,318,-1:2,318,-1:24,289,-1:3,289,-1:14,289,-1:2,289,-1:24,277,-1:3,277," +
"-1:14,277,-1:2,277,-1:9,10:6,-1,10:3,-1:2,10:3,278,10:3,278,10:9,-1:3,10:2," +
"278,10,-1,278,-1:22,281,-1:71,287,-1:25,285,-1:44,292,-1:3,292,-1:14,292,-1" +
":2,292,-1:24,294,-1:3,294,-1:14,294,-1:2,294,-1:24,295,-1:3,295,-1:14,295,-" +
"1:2,295,-1:47,288,-1:23,297,-1:3,297,-1:14,297,-1:2,297,-1:24,298,-1:3,298," +
"-1:14,298,-1:2,298,-1:24,299,-1:3,299,-1:14,299,-1:2,299,-1:25,293,-1:45,30" +
"0,-1:3,300,-1:14,300,-1:2,300,-1:24,302,-1:3,302,-1:14,302,-1:2,302,-1:24,3" +
"03,-1:3,303,-1:14,303,-1:2,303,-1:47,304,-1:23,305,-1:3,305,-1:14,305,-1:2," +
"305,-1:24,306,-1:3,306,-1:14,306,-1:2,306,-1:24,307,-1:3,307,-1:14,307,-1:2" +
",307,-1:24,301,-1:46,308,-1:3,308,-1:14,308,-1:2,308,-1:24,310,-1:3,310,-1:" +
"14,310,-1:2,310,-1:24,311,-1:3,311,-1:14,311,-1:2,311,-1:47,312,-1:23,313,-" +
"1:3,313,-1:14,313,-1:2,313,-1:24,314,-1:3,314,-1:14,314,-1:2,314,-1:24,315," +
"-1:3,315,-1:14,315,-1:2,315,-1:24,316,-1:3,316,-1:14,316,-1:2,316,-1:24,317" +
",-1:3,317,-1:14,317,-1:2,317,-1:4");

	public java_cup.runtime.Symbol next_token ()
		throws java.io.IOException {
		int yy_lookahead;
		int yy_anchor = YY_NO_ANCHOR;
		int yy_state = yy_state_dtrans[yy_lexical_state];
		int yy_next_state = YY_NO_STATE;
		int yy_last_accept_state = YY_NO_STATE;
		boolean yy_initial = true;
		int yy_this_accept;

		yy_mark_start();
		yy_this_accept = yy_acpt[yy_state];
		if (YY_NOT_ACCEPT != yy_this_accept) {
			yy_last_accept_state = yy_state;
			yy_mark_end();
		}
		while (true) {
			if (yy_initial && yy_at_bol) yy_lookahead = YY_BOL;
			else yy_lookahead = yy_advance();
			yy_next_state = YY_F;
			yy_next_state = yy_nxt[yy_rmap[yy_state]][yy_cmap[yy_lookahead]];
			if (YY_EOF == yy_lookahead && true == yy_initial) {
				return null;
			}
			if (YY_F != yy_next_state) {
				yy_state = yy_next_state;
				yy_initial = false;
				yy_this_accept = yy_acpt[yy_state];
				if (YY_NOT_ACCEPT != yy_this_accept) {
					yy_last_accept_state = yy_state;
					yy_mark_end();
				}
			}
			else {
				if (YY_NO_STATE == yy_last_accept_state) {
					throw (new Error("Lexical Error: Unmatched Input."));
				}
				else {
					yy_anchor = yy_acpt[yy_last_accept_state];
					if (0 != (YY_END & yy_anchor)) {
						yy_move_end();
					}
					yy_to_mark();
					switch (yy_last_accept_state) {
					case 1:
						
					case -2:
						break;
					case 2:
						{ return new Symbol(sym._SYMB_0); }
					case -3:
						break;
					case 3:
						{ return new Symbol(sym._SYMB_1); }
					case -4:
						break;
					case 4:
						{ return new Symbol(sym._SYMB_2); }
					case -5:
						break;
					case 5:
						{ yybegin(STRING); }
					case -6:
						break;
					case 6:
						{ return new Symbol(sym.LIdent, yytext().intern()); }
					case -7:
						break;
					case 7:
						{ return new Symbol(sym._SYMB_4); }
					case -8:
						break;
					case 8:
						{ return new Symbol(sym._SYMB_6); }
					case -9:
						break;
					case 9:
						{ return new Symbol(sym._SYMB_7); }
					case -10:
						break;
					case 10:
						{ return new Symbol(sym.UIdent, yytext().intern()); }
					case -11:
						break;
					case 11:
						{ return new Symbol(sym._SYMB_32); }
					case -12:
						break;
					case 12:
						{ return new Symbol(sym._SYMB_33); }
					case -13:
						break;
					case 13:
						{ return new Symbol(sym._INTEGER_, new Integer(yytext())); }
					case -14:
						break;
					case 14:
						{ return new Symbol(sym.Wild, yytext().intern()); }
					case -15:
						break;
					case 15:
						{ /* ignore white space. */ }
					case -16:
						break;
					case 16:
						{ return new Symbol(sym._DOUBLE_, new Double(yytext())); }
					case -17:
						break;
					case 17:
						{ return new Symbol(sym._SYMB_30); }
					case -18:
						break;
					case 18:
						{ return new Symbol(sym.VarUIdent, yytext().intern()); }
					case -19:
						break;
					case 19:
						{ return new Symbol(sym._SYMB_36); }
					case -20:
						break;
					case 20:
						{ return new Symbol(sym._SYMB_35); }
					case -21:
						break;
					case 21:
						{ return new Symbol(sym._SYMB_12); }
					case -22:
						break;
					case 22:
						{ return new Symbol(sym._SYMB_34); }
					case -23:
						break;
					case 23:
						{ return new Symbol(sym._SYMB_5); }
					case -24:
						break;
					case 24:
						{ return new Symbol(sym._SYMB_14); }
					case -25:
						break;
					case 25:
						{ return new Symbol(sym._SYMB_31); }
					case -26:
						break;
					case 26:
						{ return new Symbol(sym._SYMB_13); }
					case -27:
						break;
					case 27:
						{ return new Symbol(sym._SYMB_3); }
					case -28:
						break;
					case 28:
						{ return new Symbol(sym._SYMB_17); }
					case -29:
						break;
					case 29:
						{ return new Symbol(sym._SYMB_16); }
					case -30:
						break;
					case 30:
						{ return new Symbol(sym._SYMB_21); }
					case -31:
						break;
					case 31:
						{ return new Symbol(sym._SYMB_18); }
					case -32:
						break;
					case 32:
						{ return new Symbol(sym._SYMB_15); }
					case -33:
						break;
					case 33:
						{ return new Symbol(sym._SYMB_27); }
					case -34:
						break;
					case 34:
						{ return new Symbol(sym._SYMB_24); }
					case -35:
						break;
					case 35:
						{ return new Symbol(sym._SYMB_22); }
					case -36:
						break;
					case 36:
						{ return new Symbol(sym._SYMB_19); }
					case -37:
						break;
					case 37:
						{ return new Symbol(sym._SYMB_28); }
					case -38:
						break;
					case 38:
						{ return new Symbol(sym._SYMB_25); }
					case -39:
						break;
					case 39:
						{ return new Symbol(sym._SYMB_23); }
					case -40:
						break;
					case 40:
						{ return new Symbol(sym._SYMB_29); }
					case -41:
						break;
					case 41:
						{ return new Symbol(sym._SYMB_20); }
					case -42:
						break;
					case 42:
						{ return new Symbol(sym._SYMB_8); }
					case -43:
						break;
					case 43:
						{ return new Symbol(sym._SYMB_10); }
					case -44:
						break;
					case 44:
						{ return new Symbol(sym._SYMB_9); }
					case -45:
						break;
					case 45:
						{ return new Symbol(sym._SYMB_11); }
					case -46:
						break;
					case 46:
						{ return new Symbol(sym._SYMB_26); }
					case -47:
						break;
					case 47:
						{ return new Symbol(sym.PrimUUID, yytext().intern()); }
					case -48:
						break;
					case 48:
						{ pstring += yytext(); }
					case -49:
						break;
					case 49:
						{ String foo = pstring; pstring = new String(); yybegin(YYINITIAL); return new Symbol(sym._STRING_, foo.intern()); }
					case -50:
						break;
					case 50:
						{ yybegin(ESCAPED); }
					case -51:
						break;
					case 51:
						{ pstring += yytext(); yybegin(STRING); }
					case -52:
						break;
					case 52:
						{ pstring += "\""; yybegin(STRING); }
					case -53:
						break;
					case 53:
						{ pstring += "\t"; yybegin(STRING); }
					case -54:
						break;
					case 54:
						{ pstring +=  "\n"; yybegin(STRING); }
					case -55:
						break;
					case 55:
						{ pstring += "\\"; yybegin(STRING); }
					case -56:
						break;
					case 57:
						{ return new Symbol(sym.LIdent, yytext().intern()); }
					case -57:
						break;
					case 58:
						{ return new Symbol(sym.UIdent, yytext().intern()); }
					case -58:
						break;
					case 59:
						{ return new Symbol(sym._INTEGER_, new Integer(yytext())); }
					case -59:
						break;
					case 60:
						{ return new Symbol(sym._DOUBLE_, new Double(yytext())); }
					case -60:
						break;
					case 62:
						{ return new Symbol(sym.LIdent, yytext().intern()); }
					case -61:
						break;
					case 63:
						{ return new Symbol(sym._INTEGER_, new Integer(yytext())); }
					case -62:
						break;
					case 65:
						{ return new Symbol(sym.LIdent, yytext().intern()); }
					case -63:
						break;
					case 192:
						{ return new Symbol(sym.LIdent, yytext().intern()); }
					case -64:
						break;
					case 193:
						{ return new Symbol(sym.UIdent, yytext().intern()); }
					case -65:
						break;
					case 194:
						{ return new Symbol(sym._INTEGER_, new Integer(yytext())); }
					case -66:
						break;
					case 226:
						{ return new Symbol(sym.LIdent, yytext().intern()); }
					case -67:
						break;
					case 242:
						{ return new Symbol(sym.LIdent, yytext().intern()); }
					case -68:
						break;
					case 248:
						{ return new Symbol(sym.LIdent, yytext().intern()); }
					case -69:
						break;
					case 249:
						{ return new Symbol(sym.UIdent, yytext().intern()); }
					case -70:
						break;
					case 250:
						{ return new Symbol(sym._INTEGER_, new Integer(yytext())); }
					case -71:
						break;
					case 261:
						{ return new Symbol(sym.LIdent, yytext().intern()); }
					case -72:
						break;
					case 263:
						{ return new Symbol(sym.LIdent, yytext().intern()); }
					case -73:
						break;
					case 264:
						{ return new Symbol(sym.LIdent, yytext().intern()); }
					case -74:
						break;
					case 265:
						{ return new Symbol(sym.UIdent, yytext().intern()); }
					case -75:
						break;
					case 266:
						{ return new Symbol(sym._INTEGER_, new Integer(yytext())); }
					case -76:
						break;
					case 278:
						{ return new Symbol(sym.UIdent, yytext().intern()); }
					case -77:
						break;
					case 279:
						{ return new Symbol(sym._INTEGER_, new Integer(yytext())); }
					case -78:
						break;
					case 290:
						{ return new Symbol(sym.UIdent, yytext().intern()); }
					case -79:
						break;
					default:
						yy_error(YY_E_INTERNAL,false);
					case -1:
					}
					yy_initial = true;
					yy_state = yy_state_dtrans[yy_lexical_state];
					yy_next_state = YY_NO_STATE;
					yy_last_accept_state = YY_NO_STATE;
					yy_mark_start();
					yy_this_accept = yy_acpt[yy_state];
					if (YY_NOT_ACCEPT != yy_this_accept) {
						yy_last_accept_state = yy_state;
						yy_mark_end();
					}
				}
			}
		}
	}
}
