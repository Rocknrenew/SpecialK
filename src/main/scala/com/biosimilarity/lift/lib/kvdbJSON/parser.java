
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jan 20 07:45:34 PST 2012
//----------------------------------------------------

package com.biosimilarity.lift.lib.kvdbJSON;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jan 20 07:45:34 PST 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\004\000\002\002\007\000\002\002" +
    "\007\000\002\002\007\000\002\002\007\000\002\003\005" +
    "\000\002\004\005\000\002\005\005\000\002\006\005\000" +
    "\002\007\015\000\002\007\011\000\002\010\015\000\002" +
    "\010\011\000\002\011\007\000\002\011\007\000\002\011" +
    "\011\000\002\012\007\000\002\012\007\000\002\012\011" +
    "\000\002\013\007\000\002\014\015\000\002\015\013\000" +
    "\002\016\007\000\002\017\007\000\002\017\011\000\002" +
    "\020\007\000\002\020\011\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\026\003\000\002\027\003" +
    "\000\002\030\005\000\002\031\005\000\002\032\007\000" +
    "\002\033\003\000\002\033\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\035\005\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\037\003\000\002\037\003\000\002\040\003\000" +
    "\002\040\003\000\002\041\005\000\002\041\003\000\002" +
    "\042\005\000\002\043\004\000\002\044\005\000\002\044" +
    "\003\000\002\045\004\000\002\046\003\000\002\047\003" +
    "\000\002\050\003\000\002\051\003\000\002\052\003\000" +
    "\002\053\003\000\002\054\003\000\002\054\003\000\002" +
    "\054\003\000\002\055\002\000\002\055\003\000\002\055" +
    "\005\000\002\056\002\000\002\056\003\000\002\056\005" +
    "\000\002\057\002\000\002\057\003\000\002\057\005\000" +
    "\002\060\002\000\002\060\003\000\002\060\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\364\000\004\004\005\001\002\000\004\002\366\001" +
    "\002\000\006\007\006\011\013\001\002\000\004\010\352" +
    "\001\002\000\004\005\312\001\002\000\004\005\302\001" +
    "\002\000\004\005\205\001\002\000\004\005\175\001\002" +
    "\000\004\010\014\001\002\000\006\004\016\012\017\001" +
    "\002\000\006\005\ufff9\006\ufff9\001\002\000\032\026\050" +
    "\027\046\030\047\031\045\032\044\033\043\034\042\035" +
    "\041\036\040\037\037\040\036\041\035\001\002\000\004" +
    "\004\021\001\002\000\006\005\ufffa\006\ufffa\001\002\000" +
    "\006\016\022\017\023\001\002\000\004\010\030\001\002" +
    "\000\004\010\024\001\002\000\004\047\025\001\002\000" +
    "\004\006\026\001\002\000\004\013\027\001\002\000\006" +
    "\005\uffef\006\uffef\001\002\000\004\047\031\001\002\000" +
    "\004\006\032\001\002\000\004\013\033\001\002\000\006" +
    "\005\ufff2\006\ufff2\001\002\000\004\010\161\001\002\000" +
    "\004\010\uffdb\001\002\000\004\010\uffdc\001\002\000\004" +
    "\010\uffdd\001\002\000\004\010\uffde\001\002\000\004\010" +
    "\uffdf\001\002\000\004\010\uffe0\001\002\000\004\010\uffe1" +
    "\001\002\000\004\010\uffe2\001\002\000\004\010\uffe3\001" +
    "\002\000\004\010\uffe5\001\002\000\004\010\uffe4\001\002" +
    "\000\004\010\uffe6\001\002\000\004\010\151\001\002\000" +
    "\004\010\122\001\002\000\004\010\054\001\002\000\004" +
    "\004\056\001\002\000\004\006\121\001\002\000\004\022" +
    "\057\001\002\000\004\010\060\001\002\000\004\012\061" +
    "\001\002\000\004\004\062\001\002\000\004\051\072\001" +
    "\002\000\004\005\065\001\002\000\006\005\uffd6\006\uffd6" +
    "\001\002\000\004\051\066\001\002\000\004\013\uffd5\001" +
    "\002\000\004\013\070\001\002\000\004\006\071\001\002" +
    "\000\004\006\uffec\001\002\000\004\010\073\001\002\000" +
    "\004\012\075\001\002\000\004\006\120\001\002\000\026" +
    "\004\062\012\075\013\uffb3\046\113\047\112\050\110\051" +
    "\104\052\106\053\107\054\111\001\002\000\006\005\uffd0" +
    "\013\uffd0\001\002\000\006\005\uffc9\013\uffc9\001\002\000" +
    "\006\005\116\013\uffb2\001\002\000\006\005\uffcd\013\uffcd" +
    "\001\002\000\004\013\115\001\002\000\006\005\uffcf\013" +
    "\uffcf\001\002\000\006\005\uffcb\013\uffcb\001\002\000\006" +
    "\005\uffce\013\uffce\001\002\000\006\005\uffc5\013\uffc5\001" +
    "\002\000\006\005\uffc4\013\uffc4\001\002\000\006\005\uffc7" +
    "\013\uffc7\001\002\000\006\005\uffd1\013\uffd1\001\002\000" +
    "\006\005\uffc8\013\uffc8\001\002\000\006\005\uffc6\013\uffc6" +
    "\001\002\000\006\005\uffca\013\uffca\001\002\000\010\005" +
    "\uffcc\006\uffcc\013\uffcc\001\002\000\026\004\062\012\075" +
    "\013\uffb3\046\113\047\112\050\110\051\104\052\106\053" +
    "\107\054\111\001\002\000\004\013\uffb1\001\002\000\010" +
    "\005\uffd2\006\uffd2\013\uffd2\001\002\000\006\005\ufff3\006" +
    "\ufff3\001\002\000\004\004\124\001\002\000\004\006\150" +
    "\001\002\000\004\021\125\001\002\000\004\010\126\001" +
    "\002\000\004\012\127\001\002\000\004\004\062\001\002" +
    "\000\004\005\131\001\002\000\004\004\132\001\002\000" +
    "\006\006\uffb0\054\140\001\002\000\004\005\134\001\002" +
    "\000\004\051\066\001\002\000\004\013\136\001\002\000" +
    "\004\006\137\001\002\000\004\006\uffed\001\002\000\004" +
    "\010\146\001\002\000\006\005\144\006\uffaf\001\002\000" +
    "\004\006\143\001\002\000\004\005\uffd4\001\002\000\006" +
    "\006\uffb0\054\140\001\002\000\004\006\uffae\001\002\000" +
    "\004\004\062\001\002\000\006\005\uffd3\006\uffd3\001\002" +
    "\000\006\005\ufff1\006\ufff1\001\002\000\004\004\153\001" +
    "\002\000\004\006\160\001\002\000\004\020\154\001\002" +
    "\000\004\010\155\001\002\000\004\004\062\001\002\000" +
    "\004\006\157\001\002\000\004\006\uffee\001\002\000\006" +
    "\005\ufff4\006\ufff4\001\002\000\004\004\163\001\002\000" +
    "\004\006\174\001\002\000\004\023\164\001\002\000\004" +
    "\010\165\001\002\000\012\042\171\043\170\051\167\052" +
    "\172\001\002\000\004\006\173\001\002\000\004\006\uffd7" +
    "\001\002\000\004\006\uffd9\001\002\000\004\006\uffda\001" +
    "\002\000\004\006\uffd8\001\002\000\004\006\uffeb\001\002" +
    "\000\006\005\ufff0\006\ufff0\001\002\000\004\011\177\001" +
    "\002\000\004\006\204\001\002\000\004\010\200\001\002" +
    "\000\006\004\201\012\202\001\002\000\016\034\042\035" +
    "\041\036\040\037\037\040\036\041\035\001\002\000\004" +
    "\004\203\001\002\000\004\017\023\001\002\000\004\002" +
    "\ufffe\001\002\000\004\007\206\001\002\000\004\010\211" +
    "\001\002\000\004\006\210\001\002\000\004\002\ufffd\001" +
    "\002\000\004\012\213\001\002\000\006\005\ufffb\006\ufffb" +
    "\001\002\000\010\004\215\047\220\056\216\001\002\000" +
    "\004\005\255\001\002\000\004\015\250\001\002\000\004" +
    "\010\uffba\001\002\000\004\010\221\001\002\000\004\005" +
    "\uffc2\001\002\000\004\044\222\001\002\000\004\044\224" +
    "\001\002\000\004\005\uffc3\001\002\000\012\005\uffbc\010" +
    "\uffbc\044\uffbc\056\uffbc\001\002\000\010\010\uffaa\044\uffaa" +
    "\056\240\001\002\000\004\044\224\001\002\000\006\005" +
    "\uffad\056\232\001\002\000\004\005\uffc1\001\002\000\004" +
    "\005\uffbd\001\002\000\006\005\uffb9\044\uffb9\001\002\000" +
    "\006\005\uffac\044\234\001\002\000\006\005\uffad\056\232" +
    "\001\002\000\004\005\uffab\001\002\000\006\010\245\044" +
    "\uffbe\001\002\000\010\010\uffa9\044\uffa9\045\243\001\002" +
    "\000\010\010\uffb8\044\uffb8\045\uffb8\001\002\000\004\044" +
    "\uffc0\001\002\000\006\010\uffbb\044\uffbb\001\002\000\010" +
    "\010\uffaa\044\uffaa\056\240\001\002\000\006\010\uffa8\044" +
    "\uffa8\001\002\000\004\052\246\001\002\000\004\044\uffb7" +
    "\001\002\000\004\044\uffbf\001\002\000\004\010\251\001" +
    "\002\000\004\047\252\001\002\000\004\006\253\001\002" +
    "\000\004\013\254\001\002\000\006\005\ufff5\006\ufff5\001" +
    "\002\000\006\047\220\056\216\001\002\000\004\005\257" +
    "\001\002\000\010\047\262\056\260\060\261\001\002\000" +
    "\006\005\uffb6\013\uffb6\001\002\000\006\005\uffb5\013\uffb5" +
    "\001\002\000\006\005\uffb4\013\uffb4\001\002\000\004\005" +
    "\264\001\002\000\010\047\262\056\260\060\261\001\002" +
    "\000\004\005\266\001\002\000\004\004\267\001\002\000" +
    "\004\025\272\001\002\000\004\013\271\001\002\000\006" +
    "\005\ufff6\006\ufff6\001\002\000\004\010\273\001\002\000" +
    "\006\012\274\047\275\001\002\000\010\047\262\056\260" +
    "\060\261\001\002\000\004\006\276\001\002\000\004\013" +
    "\uffe8\001\002\000\004\013\300\001\002\000\004\006\301" +
    "\001\002\000\004\013\uffe7\001\002\000\004\011\304\001" +
    "\002\000\004\006\311\001\002\000\004\010\305\001\002" +
    "\000\006\004\306\012\307\001\002\000\016\026\050\027" +
    "\046\030\047\031\045\032\044\033\043\001\002\000\004" +
    "\004\310\001\002\000\004\016\022\001\002\000\004\002" +
    "\000\001\002\000\004\007\313\001\002\000\004\010\316" +
    "\001\002\000\004\006\315\001\002\000\004\002\uffff\001" +
    "\002\000\004\012\320\001\002\000\006\005\ufffc\006\ufffc" +
    "\001\002\000\010\004\322\047\220\056\216\001\002\000" +
    "\004\005\330\001\002\000\004\014\323\001\002\000\004" +
    "\010\324\001\002\000\004\047\325\001\002\000\004\006" +
    "\326\001\002\000\004\013\327\001\002\000\006\005\ufff7" +
    "\006\ufff7\001\002\000\006\047\220\056\216\001\002\000" +
    "\004\005\332\001\002\000\010\047\262\056\260\060\261" +
    "\001\002\000\004\005\334\001\002\000\010\047\262\056" +
    "\260\060\261\001\002\000\004\005\336\001\002\000\004" +
    "\004\340\001\002\000\004\013\351\001\002\000\004\024" +
    "\341\001\002\000\004\010\342\001\002\000\006\012\343" +
    "\047\344\001\002\000\010\047\262\056\260\060\261\001" +
    "\002\000\004\006\345\001\002\000\004\013\uffea\001\002" +
    "\000\004\013\347\001\002\000\004\006\350\001\002\000" +
    "\004\013\uffe9\001\002\000\006\005\ufff8\006\ufff8\001\002" +
    "\000\004\012\353\001\002\000\010\004\355\047\220\056" +
    "\216\001\002\000\004\005\356\001\002\000\006\014\323" +
    "\015\250\001\002\000\006\047\220\056\216\001\002\000" +
    "\004\005\360\001\002\000\010\047\262\056\260\060\261" +
    "\001\002\000\004\005\362\001\002\000\010\047\262\056" +
    "\260\060\261\001\002\000\004\005\364\001\002\000\004" +
    "\004\365\001\002\000\006\024\341\025\272\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\364\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\003\007\004\011\005\006\006\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\017" +
    "\012\014\001\001\000\002\001\001\000\012\021\050\022" +
    "\052\023\051\024\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\026\062\032\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\073" +
    "\001\001\000\002\001\001\000\022\032\100\033\077\034" +
    "\075\035\104\036\102\037\076\040\113\055\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\032\100\033\077\034\075\035\104\036\102\037\076" +
    "\040\113\055\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\127\032\063\001\001\000\002\001\001" +
    "\000\004\030\132\001\001\000\006\031\140\056\141\001" +
    "\001\000\002\001\001\000\004\027\134\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\140\056\144\001\001\000\002\001\001\000" +
    "\004\032\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\155\032\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\175\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\014\001\001\000\006\023\051\024\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\211\001\001\000\002" +
    "\001\001\000\006\041\213\050\216\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\222\001\001\000\006\043" +
    "\225\046\224\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\044\240\047\235\052\236\060\241\001\001\000" +
    "\006\045\227\046\226\001\001\000\006\051\232\057\230" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\051\232\057\234\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\052\236\060\243\001\001\000\002\001\001\000\004\053" +
    "\246\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\041\255\050\216\001\001" +
    "\000\002\001\001\000\004\054\262\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\054\264\001\001\000\002\001\001\000\004\020" +
    "\267\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\054" +
    "\276\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\302\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\017\001\001\000\006\021\050\022\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\313\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\316\001\001\000\002\001\001" +
    "\000\006\041\320\050\216\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\041" +
    "\330\050\216\001\001\000\002\001\001\000\004\054\332" +
    "\001\001\000\002\001\001\000\004\054\334\001\001\000" +
    "\002\001\001\000\004\017\336\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\054\345\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\316\010\211\001\001\000\006" +
    "\041\353\050\216\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\041\356\050\216\001\001\000\002\001\001" +
    "\000\004\054\360\001\001\000\002\001\001\000\004\054" +
    "\362\001\001\000\002\001\001\000\006\017\336\020\267" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public com.biosimilarity.lift.lib.kvdbJSON.Absyn.Message pMessage() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (com.biosimilarity.lift.lib.kvdbJSON.Absyn.Message) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ListDNSElement ::= DNSElement _SYMB_33 ListDNSElement 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.ListDNSElement RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.DNSElement p_1 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.DNSElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.ListDNSElement p_3 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.ListDNSElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDNSElement",46, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ListDNSElement ::= DNSElement 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.ListDNSElement RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.DNSElement p_1 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.DNSElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.ListDNSElement(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDNSElement",46, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ListDNSElement ::= 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.ListDNSElement RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.ListDNSElement(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDNSElement",46, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ListURIPathElement ::= URIPathElement _SYMB_32 ListURIPathElement 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.ListURIPathElement RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.URIPathElement p_1 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.URIPathElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.ListURIPathElement p_3 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.ListURIPathElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListURIPathElement",45, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ListURIPathElement ::= URIPathElement 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.ListURIPathElement RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.URIPathElement p_1 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.URIPathElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.ListURIPathElement(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListURIPathElement",45, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ListURIPathElement ::= 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.ListURIPathElement RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.ListURIPathElement(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListURIPathElement",45, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ListSubstPair ::= SubstPair _SYMB_1 ListSubstPair 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.ListSubstPair RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.SubstPair p_1 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.SubstPair)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.ListSubstPair p_3 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.ListSubstPair)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListSubstPair",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ListSubstPair ::= SubstPair 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.ListSubstPair RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.SubstPair p_1 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.SubstPair)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.ListSubstPair(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListSubstPair",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ListSubstPair ::= 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.ListSubstPair RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.ListSubstPair(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListSubstPair",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ListQryElem ::= QryElem _SYMB_1 ListQryElem 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.ListQryElem RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryElem p_1 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryElem)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.ListQryElem p_3 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.ListQryElem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListQryElem",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ListQryElem ::= QryElem 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.ListQryElem RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryElem p_1 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryElem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.ListQryElem(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListQryElem",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ListQryElem ::= 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.ListQryElem RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.ListQryElem(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListQryElem",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // UUID ::= _SYMB_35 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.UUID RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBNullUUID(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UUID",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // UUID ::= PrimUUID 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.UUID RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBPrimUUID(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UUID",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // UUID ::= LIdent 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.UUID RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBLUUID(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UUID",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Port ::= _INTEGER_ 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.Port RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.AtomPort(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Port",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DNSElement ::= LIdent 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.DNSElement RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.AtomDNSElement(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DNSElement",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // URIPathElement ::= LIdent 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.URIPathElement RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.AtomPathElement(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URIPathElement",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // URIScheme ::= LIdent 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.URIScheme RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.AtomScheme(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URIScheme",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NetLocation ::= ListDNSElement 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.NetLocation RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.ListDNSElement p_1 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.ListDNSElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.DNSAddr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NetLocation",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // URIRoot ::= _SYMB_32 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.URIRoot RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.URIOrigin(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URIRoot",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // URIRelativePath ::= URIRoot ListURIPathElement 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.URIRelativePath RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.URIRoot p_1 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.URIRoot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.ListURIPathElement p_2 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.ListURIPathElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.SlashPath(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URIRelativePath",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // URIRsrcLocation ::= NetLocation 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.URIRsrcLocation RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.NetLocation p_1 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.NetLocation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.URIRsrcLoc(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URIRsrcLocation",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // URIRsrcLocation ::= NetLocation _SYMB_4 Port 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.URIRsrcLocation RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.NetLocation p_1 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.NetLocation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.Port p_3 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.Port)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.URIRsrcPortLoc(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URIRsrcLocation",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // URILocation ::= URIRoot URIRsrcLocation 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.URILocation RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.URIRoot p_1 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.URIRoot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.URIRsrcLocation p_2 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.URIRsrcLocation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.URINetLocation(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URILocation",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // URIPath ::= _SYMB_32 URILocation URIRelativePath 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.URIPath RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.URILocation p_2 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.URILocation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.URIRelativePath p_3 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.URIRelativePath)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.LocatedtedPath(p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URIPath",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // URI ::= _SYMB_35 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.URI RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.NullURI(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URI",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // URI ::= URIScheme _SYMB_4 URIPath 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.URI RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.URIScheme p_1 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.URIScheme)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.URIPath p_3 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.URIPath)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.BasicURI(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URI",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // QryNum ::= _DOUBLE_ 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryNum RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.QDbl(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QryNum",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // QryNum ::= _INTEGER_ 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryNum RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.QInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QryNum",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // QryBool ::= _SYMB_34 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryBool RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.QFal(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QryBool",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // QryBool ::= _SYMB_36 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryBool RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.QTru(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QryBool",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // QryGrndLit ::= _SYMB_35 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryGrndLit RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.QNul(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QryGrndLit",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // QryGrndLit ::= QryBool 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryGrndLit RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryBool p_1 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryBool)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.QBool(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QryGrndLit",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // QryGrndLit ::= QryNum 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryGrndLit RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryNum p_1 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryNum)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.QNum(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QryGrndLit",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // QryGrndLit ::= _STRING_ 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryGrndLit RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.QStr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QryGrndLit",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // QryArray ::= _SYMB_6 ListQryElem _SYMB_7 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryArray RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.ListQryElem p_2 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.ListQryElem)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.QArray(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QryArray",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // QryValue ::= QryTerm 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryValue RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryTerm p_1 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryTerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.QComp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QryValue",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // QryValue ::= QryArray 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryValue RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryArray p_1 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryArray)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.QColl(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QryValue",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // QryValue ::= QryGrndLit 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryValue RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryGrndLit p_1 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryGrndLit)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.QAtomic(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QryValue",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // QryElem ::= QryValue 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryElem RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryValue p_1 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.QVal(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QryElem",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // QryElem ::= VarUIdent 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryElem RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.QVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QryElem",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // QryTerm ::= _SYMB_0 _STRING_ _SYMB_4 QryArray _SYMB_2 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryTerm RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryArray p_4 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.QTerm(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QryTerm",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SubstPair ::= VarUIdent _SYMB_4 QryTerm 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.SubstPair RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryTerm p_3 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryTerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBSubstPair(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SubstPair",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Substitution ::= _SYMB_0 ListSubstPair _SYMB_2 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.Substitution RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.ListSubstPair p_2 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.ListSubstPair)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBSubst(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Substitution",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Blob ::= _STRING_ 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.Blob RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.QBlob(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Blob",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Pattern ::= QryTerm 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.Pattern RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryTerm p_1 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.QryTerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.QPointed(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Status ::= _STRING_ 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.Status RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBStatusStr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Status",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Status ::= _INTEGER_ 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.Status RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBStatusCode(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Status",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Status ::= _SYMB_31 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.Status RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBStatusNotOk(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Status",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Status ::= _SYMB_30 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.Status RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBStatusOk(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Status",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TellRsp ::= _SYMB_29 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.TellRsp RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBPublishRsp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TellRsp",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TellRsp ::= _SYMB_28 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.TellRsp RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBStoreRsp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TellRsp",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TellRsp ::= _SYMB_27 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.TellRsp RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBPutRsp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TellRsp",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // AskRsp ::= _SYMB_26 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.AskRsp RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBSubscribeRsp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AskRsp",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // AskRsp ::= _SYMB_25 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.AskRsp RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBFetchRsp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AskRsp",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // AskRsp ::= _SYMB_24 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.AskRsp RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBGetRsp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AskRsp",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TellReq ::= _SYMB_23 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.TellReq RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBPublishReq(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TellReq",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TellReq ::= _SYMB_22 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.TellReq RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBStoreReq(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TellReq",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TellReq ::= _SYMB_21 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.TellReq RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBPutReq(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TellReq",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // AskReq ::= _SYMB_20 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.AskReq RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBSubscribeReq(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AskReq",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // AskReq ::= _SYMB_19 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.AskReq RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBFetchReq(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AskReq",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // AskReq ::= _SYMB_18 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.AskReq RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBGetReq(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AskReq",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // RspJust ::= _SYMB_0 _SYMB_17 _SYMB_4 _SYMB_6 UUID _SYMB_7 _SYMB_2 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.RspJust RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.UUID p_5 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.UUID)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBRspJustSome(p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RspJust",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // RspJust ::= _SYMB_0 _SYMB_17 _SYMB_4 _SYMB_35 _SYMB_2 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.RspJust RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBRspJustNone(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RspJust",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ReqJust ::= _SYMB_0 _SYMB_16 _SYMB_4 _SYMB_6 UUID _SYMB_7 _SYMB_2 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.ReqJust RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.UUID p_5 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.UUID)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBReqJustSome(p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReqJust",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ReqJust ::= _SYMB_0 _SYMB_16 _SYMB_4 _SYMB_35 _SYMB_2 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.ReqJust RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBReqJustNone(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReqJust",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TellRspPacket ::= _SYMB_0 _SYMB_15 _SYMB_4 Status _SYMB_2 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.TellRspPacket RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.Status p_4 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.Status)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBTellRspData(p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TellRspPacket",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TellReqPacket ::= _SYMB_0 _SYMB_14 _SYMB_4 _SYMB_6 Pattern _SYMB_1 Blob _SYMB_7 _SYMB_2 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.TellReqPacket RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.Pattern p_5 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.Blob p_7 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.Blob)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBTellReqData(p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TellReqPacket",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // AskRspPacket ::= _SYMB_0 _SYMB_13 _SYMB_4 _SYMB_6 Pattern _SYMB_1 Substitution _SYMB_1 Blob _SYMB_7 _SYMB_2 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.AskRspPacket RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.Pattern p_5 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.Substitution p_7 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.Substitution)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.Blob p_9 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.Blob)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBAskRspData(p_5,p_7,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AskRspPacket",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // AskReqPacket ::= _SYMB_0 _SYMB_12 _SYMB_4 Pattern _SYMB_2 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.AskReqPacket RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.Pattern p_4 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBAskReqData(p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AskReqPacket",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // KVDBResponse ::= _SYMB_6 _SYMB_0 _SYMB_11 _SYMB_4 _SYMB_35 _SYMB_2 _SYMB_7 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBResponse RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBNoRsp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("KVDBResponse",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // KVDBResponse ::= _SYMB_0 TellRsp _SYMB_4 TellRspPacket _SYMB_2 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBResponse RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.TellRsp p_2 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.TellRsp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.TellRspPacket p_4 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.TellRspPacket)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBTellRsp(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("KVDBResponse",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // KVDBResponse ::= _SYMB_0 AskRsp _SYMB_4 AskRspPacket _SYMB_2 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBResponse RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.AskRsp p_2 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.AskRsp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.AskRspPacket p_4 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.AskRspPacket)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBAskRsp(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("KVDBResponse",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // KVDBRequest ::= _SYMB_6 _SYMB_0 _SYMB_10 _SYMB_4 _SYMB_35 _SYMB_2 _SYMB_7 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBRequest RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBNoReq(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("KVDBRequest",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // KVDBRequest ::= _SYMB_0 TellReq _SYMB_4 TellReqPacket _SYMB_2 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBRequest RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.TellReq p_2 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.TellReq)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.TellReqPacket p_4 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.TellReqPacket)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBTellReq(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("KVDBRequest",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // KVDBRequest ::= _SYMB_0 AskReq _SYMB_4 AskReqPacket _SYMB_2 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBRequest RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.AskReq p_2 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.AskReq)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.AskReqPacket p_4 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.AskReqPacket)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBAskReq(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("KVDBRequest",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // RspHeader ::= _SYMB_6 _SYMB_0 _SYMB_9 _SYMB_4 _SYMB_35 _SYMB_2 _SYMB_7 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.RspHeader RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBRspNoHdr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RspHeader",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // RspHeader ::= _SYMB_6 URI _SYMB_1 URI _SYMB_1 UUID _SYMB_1 UUID _SYMB_1 RspJust _SYMB_7 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.RspHeader RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.URI p_2 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.URI p_4 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.UUID p_6 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.UUID)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.UUID p_8 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.UUID)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.RspJust p_10 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.RspJust)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBRspHdr(p_2,p_4,p_6,p_8,p_10); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RspHeader",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ReqHeader ::= _SYMB_6 _SYMB_0 _SYMB_8 _SYMB_4 _SYMB_35 _SYMB_2 _SYMB_7 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.ReqHeader RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBReqNoHdr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReqHeader",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ReqHeader ::= _SYMB_6 URI _SYMB_1 URI _SYMB_1 UUID _SYMB_1 UUID _SYMB_1 ReqJust _SYMB_7 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.ReqHeader RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.URI p_2 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.URI p_4 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.UUID p_6 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.UUID)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.UUID p_8 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.UUID)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.ReqJust p_10 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.ReqJust)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBReqHdr(p_2,p_4,p_6,p_8,p_10); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReqHeader",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LblRspBody ::= _SYMB_5 _SYMB_4 KVDBResponse 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.LblRspBody RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBResponse p_3 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBResponse)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBLblRspBody(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LblRspBody",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LblReqBody ::= _SYMB_5 _SYMB_4 KVDBRequest 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.LblReqBody RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBRequest p_3 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBRequest)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBLblReqBody(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LblReqBody",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LblRspHeader ::= _SYMB_3 _SYMB_4 RspHeader 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.LblRspHeader RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.RspHeader p_3 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.RspHeader)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBLblRspHdr(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LblRspHeader",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LblReqHeader ::= _SYMB_3 _SYMB_4 ReqHeader 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.LblReqHeader RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.ReqHeader p_3 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.ReqHeader)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBLblReqHdr(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LblReqHeader",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Message ::= _SYMB_0 LblRspBody _SYMB_1 LblRspHeader _SYMB_2 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.Message RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.LblRspBody p_2 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.LblRspBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.LblRspHeader p_4 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.LblRspHeader)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBJustRspBH(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Message",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Message ::= _SYMB_0 LblRspHeader _SYMB_1 LblRspBody _SYMB_2 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.Message RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.LblRspHeader p_2 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.LblRspHeader)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.LblRspBody p_4 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.LblRspBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBJustRspHB(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Message",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Message ::= _SYMB_0 LblReqBody _SYMB_1 LblReqHeader _SYMB_2 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.Message RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.LblReqBody p_2 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.LblReqBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.LblReqHeader p_4 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.LblReqHeader)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBJustReqBH(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Message",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Message ::= _SYMB_0 LblReqHeader _SYMB_1 LblReqBody _SYMB_2 
            {
              com.biosimilarity.lift.lib.kvdbJSON.Absyn.Message RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.LblReqHeader p_2 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.LblReqHeader)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.LblReqBody p_4 = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.LblReqBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.kvdbJSON.Absyn.KVDBJustReqHB(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Message",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Message EOF 
            {
              Object RESULT =null;
		com.biosimilarity.lift.lib.kvdbJSON.Absyn.Message start_val = (com.biosimilarity.lift.lib.kvdbJSON.Absyn.Message)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

