
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jan 19 22:18:00 PST 2012
//----------------------------------------------------

package com.biosimilarity.lift.lib.amqpJSONAPI2;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jan 19 22:18:00 PST 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\136\000\002\002\004\000\002\002\007\000\002\002" +
    "\007\000\002\002\007\000\002\002\007\000\002\003\005" +
    "\000\002\004\005\000\002\005\005\000\002\006\005\000" +
    "\002\007\015\000\002\007\011\000\002\007\011\000\002" +
    "\007\011\000\002\010\015\000\002\010\011\000\002\010" +
    "\011\000\002\010\011\000\002\011\007\000\002\011\007" +
    "\000\002\011\011\000\002\012\007\000\002\012\007\000" +
    "\002\012\011\000\002\013\007\000\002\014\015\000\002" +
    "\015\013\000\002\016\007\000\002\017\007\000\002\017" +
    "\011\000\002\020\007\000\002\020\011\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\026\003\000" +
    "\002\027\003\000\002\030\005\000\002\031\005\000\002" +
    "\032\007\000\002\033\003\000\002\033\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\035\005" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\037\003\000\002\037\003\000\002" +
    "\040\003\000\002\040\003\000\002\041\005\000\002\041" +
    "\003\000\002\042\005\000\002\043\004\000\002\044\005" +
    "\000\002\044\003\000\002\045\004\000\002\046\003\000" +
    "\002\047\003\000\002\050\003\000\002\051\003\000\002" +
    "\052\003\000\002\053\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\055\002\000\002\055\003" +
    "\000\002\055\005\000\002\056\002\000\002\056\003\000" +
    "\002\056\005\000\002\057\002\000\002\057\003\000\002" +
    "\057\005\000\002\060\002\000\002\060\003\000\002\060" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0108\000\004\004\005\001\002\000\004\002\u010a\001" +
    "\002\000\006\007\006\011\013\001\002\000\004\010\376" +
    "\001\002\000\004\005\324\001\002\000\004\005\314\001" +
    "\002\000\004\005\205\001\002\000\004\005\175\001\002" +
    "\000\004\010\014\001\002\000\006\004\016\012\020\001" +
    "\002\000\006\005\ufff9\006\ufff9\001\002\000\032\032\047" +
    "\033\046\034\045\035\044\036\043\037\042\040\040\041" +
    "\036\042\041\043\037\044\034\045\053\001\002\000\006" +
    "\005\ufffa\006\ufffa\001\002\000\004\004\021\001\002\000" +
    "\006\022\023\023\022\001\002\000\004\010\030\001\002" +
    "\000\004\010\024\001\002\000\004\053\025\001\002\000" +
    "\004\006\026\001\002\000\004\013\027\001\002\000\006" +
    "\005\uffee\006\uffee\001\002\000\004\053\031\001\002\000" +
    "\004\006\032\001\002\000\004\013\033\001\002\000\006" +
    "\005\uffeb\006\uffeb\001\002\000\004\010\uffd8\001\002\000" +
    "\004\010\161\001\002\000\004\010\uffdb\001\002\000\004" +
    "\010\uffd9\001\002\000\004\010\uffdc\001\002\000\004\010" +
    "\uffda\001\002\000\004\010\uffdd\001\002\000\004\010\uffde" +
    "\001\002\000\004\010\uffdf\001\002\000\004\010\uffe0\001" +
    "\002\000\004\010\uffe1\001\002\000\004\010\uffe2\001\002" +
    "\000\004\010\151\001\002\000\004\010\122\001\002\000" +
    "\004\010\054\001\002\000\004\010\uffd7\001\002\000\004" +
    "\004\056\001\002\000\004\006\121\001\002\000\004\026" +
    "\057\001\002\000\004\010\060\001\002\000\004\012\061" +
    "\001\002\000\004\004\062\001\002\000\004\055\072\001" +
    "\002\000\004\005\065\001\002\000\006\005\uffd2\006\uffd2" +
    "\001\002\000\004\055\066\001\002\000\004\013\uffd1\001" +
    "\002\000\004\013\070\001\002\000\004\006\071\001\002" +
    "\000\004\006\uffe8\001\002\000\004\010\073\001\002\000" +
    "\004\012\075\001\002\000\004\006\120\001\002\000\026" +
    "\004\062\012\075\013\uffaf\052\106\053\105\054\107\055" +
    "\104\056\110\057\112\060\113\001\002\000\006\005\uffcc" +
    "\013\uffcc\001\002\000\006\005\116\013\uffae\001\002\000" +
    "\006\005\uffc5\013\uffc5\001\002\000\006\005\uffc9\013\uffc9" +
    "\001\002\000\004\013\115\001\002\000\006\005\uffcb\013" +
    "\uffcb\001\002\000\006\005\uffc7\013\uffc7\001\002\000\006" +
    "\005\uffc4\013\uffc4\001\002\000\006\005\uffc2\013\uffc2\001" +
    "\002\000\006\005\uffc3\013\uffc3\001\002\000\006\005\uffc1" +
    "\013\uffc1\001\002\000\006\005\uffca\013\uffca\001\002\000" +
    "\006\005\uffc0\013\uffc0\001\002\000\006\005\uffcd\013\uffcd" +
    "\001\002\000\006\005\uffc6\013\uffc6\001\002\000\010\005" +
    "\uffc8\006\uffc8\013\uffc8\001\002\000\026\004\062\012\075" +
    "\013\uffaf\052\106\053\105\054\107\055\104\056\110\057" +
    "\112\060\113\001\002\000\004\013\uffad\001\002\000\010" +
    "\005\uffce\006\uffce\013\uffce\001\002\000\006\005\uffef\006" +
    "\uffef\001\002\000\004\004\124\001\002\000\004\006\150" +
    "\001\002\000\004\025\125\001\002\000\004\010\126\001" +
    "\002\000\004\012\127\001\002\000\004\004\062\001\002" +
    "\000\004\005\131\001\002\000\004\004\133\001\002\000" +
    "\004\005\144\001\002\000\006\006\uffac\060\134\001\002" +
    "\000\004\010\142\001\002\000\006\005\140\006\uffab\001" +
    "\002\000\004\006\137\001\002\000\004\005\uffd0\001\002" +
    "\000\006\006\uffac\060\134\001\002\000\004\006\uffaa\001" +
    "\002\000\004\004\062\001\002\000\006\005\uffcf\006\uffcf" +
    "\001\002\000\004\055\066\001\002\000\004\013\146\001" +
    "\002\000\004\006\147\001\002\000\004\006\uffe9\001\002" +
    "\000\006\005\uffed\006\uffed\001\002\000\004\004\153\001" +
    "\002\000\004\006\160\001\002\000\004\024\154\001\002" +
    "\000\004\010\155\001\002\000\004\004\062\001\002\000" +
    "\004\006\157\001\002\000\004\006\uffea\001\002\000\006" +
    "\005\ufff0\006\ufff0\001\002\000\004\004\163\001\002\000" +
    "\004\006\174\001\002\000\004\027\164\001\002\000\004" +
    "\010\165\001\002\000\012\046\166\047\172\055\170\056" +
    "\171\001\002\000\004\006\uffd6\001\002\000\004\006\173" +
    "\001\002\000\004\006\uffd3\001\002\000\004\006\uffd4\001" +
    "\002\000\004\006\uffd5\001\002\000\004\006\uffe7\001\002" +
    "\000\006\005\uffec\006\uffec\001\002\000\004\011\177\001" +
    "\002\000\004\006\204\001\002\000\004\010\200\001\002" +
    "\000\006\004\201\012\202\001\002\000\016\040\040\041" +
    "\036\042\041\043\037\044\034\045\053\001\002\000\004" +
    "\004\203\001\002\000\004\023\022\001\002\000\004\002" +
    "\ufffe\001\002\000\004\007\206\001\002\000\004\010\211" +
    "\001\002\000\004\006\210\001\002\000\004\002\ufffd\001" +
    "\002\000\004\012\213\001\002\000\006\005\ufffb\006\ufffb" +
    "\001\002\000\010\004\215\053\217\062\216\001\002\000" +
    "\004\005\272\001\002\000\010\017\252\020\251\021\250" +
    "\001\002\000\004\010\uffb6\001\002\000\006\005\uffbe\006" +
    "\uffbe\001\002\000\004\010\221\001\002\000\004\050\223" +
    "\001\002\000\006\005\uffbf\006\uffbf\001\002\000\004\050" +
    "\226\001\002\000\010\010\uffa6\050\uffa6\062\237\001\002" +
    "\000\004\050\226\001\002\000\014\005\uffb8\006\uffb8\010" +
    "\uffb8\050\uffb8\062\uffb8\001\002\000\010\005\uffa9\006\uffa9" +
    "\062\232\001\002\000\006\005\uffbd\006\uffbd\001\002\000" +
    "\006\005\uffb9\006\uffb9\001\002\000\010\005\uffb5\006\uffb5" +
    "\050\uffb5\001\002\000\010\005\uffa8\006\uffa8\050\234\001" +
    "\002\000\010\005\uffa9\006\uffa9\062\232\001\002\000\006" +
    "\005\uffa7\006\uffa7\001\002\000\006\010\245\050\uffba\001" +
    "\002\000\010\010\uffb4\050\uffb4\051\uffb4\001\002\000\004" +
    "\050\uffbc\001\002\000\010\010\uffa5\050\uffa5\051\243\001" +
    "\002\000\006\010\uffb7\050\uffb7\001\002\000\010\010\uffa6" +
    "\050\uffa6\062\237\001\002\000\006\010\uffa4\050\uffa4\001" +
    "\002\000\004\056\246\001\002\000\004\050\uffb3\001\002" +
    "\000\004\050\uffbb\001\002\000\004\010\263\001\002\000" +
    "\004\010\257\001\002\000\004\010\253\001\002\000\004" +
    "\053\254\001\002\000\004\006\255\001\002\000\004\013" +
    "\256\001\002\000\006\005\ufff3\006\ufff3\001\002\000\006" +
    "\053\217\062\216\001\002\000\004\006\261\001\002\000" +
    "\004\013\262\001\002\000\006\005\ufff2\006\ufff2\001\002" +
    "\000\010\053\265\061\266\062\264\001\002\000\010\005" +
    "\uffb2\006\uffb2\013\uffb2\001\002\000\010\005\uffb0\006\uffb0" +
    "\013\uffb0\001\002\000\010\005\uffb1\006\uffb1\013\uffb1\001" +
    "\002\000\004\006\270\001\002\000\004\013\271\001\002" +
    "\000\006\005\ufff1\006\ufff1\001\002\000\006\053\217\062" +
    "\216\001\002\000\004\005\274\001\002\000\010\053\265" +
    "\061\266\062\264\001\002\000\004\005\276\001\002\000" +
    "\010\053\265\061\266\062\264\001\002\000\004\005\300" +
    "\001\002\000\004\004\301\001\002\000\004\031\304\001" +
    "\002\000\004\013\303\001\002\000\006\005\ufff4\006\ufff4" +
    "\001\002\000\004\010\305\001\002\000\006\012\307\053" +
    "\306\001\002\000\004\006\313\001\002\000\010\053\265" +
    "\061\266\062\264\001\002\000\004\013\311\001\002\000" +
    "\004\006\312\001\002\000\004\013\uffe3\001\002\000\004" +
    "\013\uffe4\001\002\000\004\011\316\001\002\000\004\006" +
    "\323\001\002\000\004\010\317\001\002\000\006\004\320" +
    "\012\321\001\002\000\016\032\047\033\046\034\045\035" +
    "\044\036\043\037\042\001\002\000\004\004\322\001\002" +
    "\000\004\022\023\001\002\000\004\002\000\001\002\000" +
    "\004\007\325\001\002\000\004\010\330\001\002\000\004" +
    "\006\327\001\002\000\004\002\uffff\001\002\000\004\012" +
    "\332\001\002\000\006\005\ufffc\006\ufffc\001\002\000\010" +
    "\004\334\053\217\062\216\001\002\000\004\005\354\001" +
    "\002\000\010\014\337\015\336\016\335\001\002\000\004" +
    "\010\350\001\002\000\004\010\344\001\002\000\004\010" +
    "\340\001\002\000\004\053\341\001\002\000\004\006\342" +
    "\001\002\000\004\013\343\001\002\000\006\005\ufff7\006" +
    "\ufff7\001\002\000\006\053\217\062\216\001\002\000\004" +
    "\006\346\001\002\000\004\013\347\001\002\000\006\005" +
    "\ufff6\006\ufff6\001\002\000\010\053\265\061\266\062\264" +
    "\001\002\000\004\006\352\001\002\000\004\013\353\001" +
    "\002\000\006\005\ufff5\006\ufff5\001\002\000\006\053\217" +
    "\062\216\001\002\000\004\005\356\001\002\000\010\053" +
    "\265\061\266\062\264\001\002\000\004\005\360\001\002" +
    "\000\010\053\265\061\266\062\264\001\002\000\004\005" +
    "\362\001\002\000\004\004\364\001\002\000\004\013\375" +
    "\001\002\000\004\030\365\001\002\000\004\010\366\001" +
    "\002\000\006\012\370\053\367\001\002\000\004\006\374" +
    "\001\002\000\010\053\265\061\266\062\264\001\002\000" +
    "\004\013\372\001\002\000\004\006\373\001\002\000\004" +
    "\013\uffe5\001\002\000\004\013\uffe6\001\002\000\006\005" +
    "\ufff8\006\ufff8\001\002\000\004\012\377\001\002\000\010" +
    "\004\u0101\053\217\062\216\001\002\000\004\005\u0102\001" +
    "\002\000\016\014\337\015\336\016\335\017\252\020\251" +
    "\021\250\001\002\000\006\053\217\062\216\001\002\000" +
    "\004\005\u0104\001\002\000\010\053\265\061\266\062\264" +
    "\001\002\000\004\005\u0106\001\002\000\010\053\265\061" +
    "\266\062\264\001\002\000\004\005\u0108\001\002\000\004" +
    "\004\u0109\001\002\000\006\030\365\031\304\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0108\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\003\007\004\011\005\006\006\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\016" +
    "\012\014\001\001\000\002\001\001\000\012\021\047\022" +
    "\051\023\050\024\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\026\062\032\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\073" +
    "\001\001\000\002\001\001\000\022\032\100\033\076\034" +
    "\075\035\110\036\102\037\077\040\113\055\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\032\100\033\076\034\075\035\110\036\102\037\077" +
    "\040\113\055\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\127\032\063\001\001\000\002\001\001" +
    "\000\004\030\131\001\001\000\002\001\001\000\006\031" +
    "\134\056\135\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\031\134\056" +
    "\140\001\001\000\002\001\001\000\004\032\142\001\001" +
    "\000\002\001\001\000\004\027\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\155\032\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\166\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\175\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\014\001\001\000\006\023\050\024\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\211\001\001\000\002" +
    "\001\001\000\006\041\213\050\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\221\001\001\000\002\001" +
    "\001\000\006\043\224\046\223\001\001\000\012\044\237" +
    "\047\235\052\240\060\241\001\001\000\006\045\227\046" +
    "\226\001\001\000\002\001\001\000\006\051\232\057\230" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\051\232\057\234\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\052\240\060\243\001\001\000\002\001\001\000\004\053" +
    "\246\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\041\257\050\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\054\266\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\041\272\050\217\001\001\000\002\001\001\000\004\054" +
    "\274\001\001\000\002\001\001\000\004\054\276\001\001" +
    "\000\002\001\001\000\004\020\301\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\054\307\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\314\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\016\001\001\000\006" +
    "\021\047\022\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\325\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\330\001\001\000\002\001\001\000\006\041\332\050\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\041\344\050\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\054\350\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\041\354\050\217\001\001\000\002\001\001\000\004\054" +
    "\356\001\001\000\002\001\001\000\004\054\360\001\001" +
    "\000\002\001\001\000\004\017\362\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\054\370\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\330\010\211\001\001\000" +
    "\006\041\377\050\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\041\u0102\050\217\001\001\000\002\001" +
    "\001\000\004\054\u0104\001\001\000\002\001\001\000\004" +
    "\054\u0106\001\001\000\002\001\001\000\006\017\362\020" +
    "\301\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.Message pMessage() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.Message) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ListDNSElement ::= DNSElement _SYMB_37 ListDNSElement 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ListDNSElement RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.DNSElement p_1 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.DNSElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ListDNSElement p_3 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ListDNSElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDNSElement",46, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ListDNSElement ::= DNSElement 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ListDNSElement RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.DNSElement p_1 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.DNSElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ListDNSElement(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDNSElement",46, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ListDNSElement ::= 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ListDNSElement RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ListDNSElement(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDNSElement",46, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ListURIPathElement ::= URIPathElement _SYMB_36 ListURIPathElement 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ListURIPathElement RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URIPathElement p_1 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URIPathElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ListURIPathElement p_3 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ListURIPathElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListURIPathElement",45, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ListURIPathElement ::= URIPathElement 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ListURIPathElement RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URIPathElement p_1 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URIPathElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ListURIPathElement(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListURIPathElement",45, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ListURIPathElement ::= 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ListURIPathElement RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ListURIPathElement(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListURIPathElement",45, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ListSubstPair ::= SubstPair _SYMB_1 ListSubstPair 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ListSubstPair RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.SubstPair p_1 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.SubstPair)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ListSubstPair p_3 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ListSubstPair)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListSubstPair",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ListSubstPair ::= SubstPair 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ListSubstPair RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.SubstPair p_1 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.SubstPair)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ListSubstPair(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListSubstPair",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ListSubstPair ::= 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ListSubstPair RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ListSubstPair(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListSubstPair",44, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ListQryElem ::= QryElem _SYMB_1 ListQryElem 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ListQryElem RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryElem p_1 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryElem)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ListQryElem p_3 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ListQryElem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListQryElem",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ListQryElem ::= QryElem 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ListQryElem RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryElem p_1 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryElem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ListQryElem(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListQryElem",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ListQryElem ::= 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ListQryElem RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ListQryElem(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListQryElem",43, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // UUID ::= _SYMB_39 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.UUID RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBNullUUID(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UUID",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // UUID ::= UIdent 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.UUID RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBUUUID(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UUID",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // UUID ::= LIdent 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.UUID RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBLUUID(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UUID",42, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Port ::= _INTEGER_ 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.Port RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.AtomPort(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Port",41, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DNSElement ::= LIdent 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.DNSElement RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.AtomDNSElement(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DNSElement",40, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // URIPathElement ::= LIdent 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URIPathElement RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.AtomPathElement(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URIPathElement",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // URIScheme ::= LIdent 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URIScheme RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.AtomScheme(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URIScheme",38, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NetLocation ::= ListDNSElement 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.NetLocation RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ListDNSElement p_1 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ListDNSElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.DNSAddr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NetLocation",37, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // URIRoot ::= _SYMB_36 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URIRoot RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URIOrigin(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URIRoot",36, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // URIRelativePath ::= URIRoot ListURIPathElement 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URIRelativePath RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URIRoot p_1 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URIRoot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ListURIPathElement p_2 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ListURIPathElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.SlashPath(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URIRelativePath",35, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // URIRsrcLocation ::= NetLocation 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URIRsrcLocation RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.NetLocation p_1 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.NetLocation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URIRsrcLoc(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URIRsrcLocation",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // URIRsrcLocation ::= NetLocation _SYMB_4 Port 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URIRsrcLocation RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.NetLocation p_1 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.NetLocation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.Port p_3 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.Port)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URIRsrcPortLoc(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URIRsrcLocation",34, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // URILocation ::= URIRoot URIRsrcLocation 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URILocation RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URIRoot p_1 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URIRoot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URIRsrcLocation p_2 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URIRsrcLocation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URINetLocation(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URILocation",33, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // URIPath ::= _SYMB_36 URILocation URIRelativePath 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URIPath RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URILocation p_2 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URILocation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URIRelativePath p_3 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URIRelativePath)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.LocatedtedPath(p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URIPath",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // URI ::= _SYMB_39 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URI RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.NullURI(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URI",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // URI ::= URIScheme _SYMB_4 URIPath 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URI RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URIScheme p_1 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URIScheme)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URIPath p_3 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URIPath)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.BasicURI(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("URI",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // QryNum ::= _DOUBLE_ 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryNum RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QDbl(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QryNum",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // QryNum ::= _INTEGER_ 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryNum RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QryNum",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // QryBool ::= _SYMB_38 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryBool RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QFal(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QryBool",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // QryBool ::= _SYMB_40 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryBool RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QTru(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QryBool",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // QryGrndLit ::= _SYMB_39 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryGrndLit RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QNul(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QryGrndLit",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // QryGrndLit ::= QryBool 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryGrndLit RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryBool p_1 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryBool)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QBool(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QryGrndLit",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // QryGrndLit ::= QryNum 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryGrndLit RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryNum p_1 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryNum)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QNum(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QryGrndLit",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // QryGrndLit ::= _STRING_ 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryGrndLit RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QStr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QryGrndLit",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // QryArray ::= _SYMB_6 ListQryElem _SYMB_7 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryArray RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ListQryElem p_2 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ListQryElem)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QArray(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QryArray",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // QryValue ::= QryTerm 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryValue RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryTerm p_1 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryTerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QComp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QryValue",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // QryValue ::= QryArray 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryValue RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryArray p_1 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryArray)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QColl(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QryValue",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // QryValue ::= QryGrndLit 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryValue RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryGrndLit p_1 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryGrndLit)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QAtomic(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QryValue",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // QryElem ::= QryValue 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryElem RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryValue p_1 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QVal(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QryElem",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // QryElem ::= VarUIdent 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryElem RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QryElem",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // QryTerm ::= _SYMB_0 _STRING_ _SYMB_4 QryArray _SYMB_2 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryTerm RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryArray p_4 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QTerm(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QryTerm",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SubstPair ::= VarUIdent _SYMB_4 QryTerm 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.SubstPair RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryTerm p_3 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryTerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBSubstPair(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SubstPair",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Substitution ::= _SYMB_0 ListSubstPair _SYMB_2 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.Substitution RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ListSubstPair p_2 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ListSubstPair)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBSubst(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Substitution",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Blob ::= _STRING_ 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.Blob RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QBlob(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Blob",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Pattern ::= QryTerm 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.Pattern RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryTerm p_1 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QryTerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.QPointed(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pattern",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Status ::= _STRING_ 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.Status RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBStatusStr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Status",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Status ::= _INTEGER_ 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.Status RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBStatusCode(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Status",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Status ::= _SYMB_35 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.Status RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBStatusNotOk(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Status",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Status ::= _SYMB_34 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.Status RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBStatusOk(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Status",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TellRsp ::= _SYMB_33 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.TellRsp RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBPublishRsp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TellRsp",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TellRsp ::= _SYMB_32 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.TellRsp RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBStoreRsp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TellRsp",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TellRsp ::= _SYMB_31 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.TellRsp RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBPutRsp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TellRsp",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // AskRsp ::= _SYMB_30 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.AskRsp RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBSubscribeRsp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AskRsp",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AskRsp ::= _SYMB_29 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.AskRsp RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBFetchRsp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AskRsp",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AskRsp ::= _SYMB_28 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.AskRsp RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBGetRsp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AskRsp",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TellReq ::= _SYMB_27 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.TellReq RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBPublishReq(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TellReq",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TellReq ::= _SYMB_26 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.TellReq RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBStoreReq(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TellReq",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TellReq ::= _SYMB_25 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.TellReq RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBPutReq(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TellReq",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // AskReq ::= _SYMB_24 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.AskReq RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBSubscribeReq(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AskReq",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // AskReq ::= _SYMB_23 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.AskReq RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBFetchReq(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AskReq",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // AskReq ::= _SYMB_22 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.AskReq RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBGetReq(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AskReq",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RspJust ::= _SYMB_0 _SYMB_21 _SYMB_4 _SYMB_6 UUID _SYMB_7 _SYMB_2 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.RspJust RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.UUID p_5 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.UUID)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBRspJustSome(p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RspJust",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // RspJust ::= _SYMB_0 _SYMB_21 _SYMB_4 _SYMB_39 _SYMB_2 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.RspJust RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBRspJustNone(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RspJust",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ReqJust ::= _SYMB_0 _SYMB_20 _SYMB_4 _SYMB_6 UUID _SYMB_7 _SYMB_2 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ReqJust RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.UUID p_5 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.UUID)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBReqJustSome(p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReqJust",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ReqJust ::= _SYMB_0 _SYMB_20 _SYMB_4 _SYMB_39 _SYMB_2 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ReqJust RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBReqJustNone(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReqJust",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TellRspPacket ::= _SYMB_0 _SYMB_19 _SYMB_4 Status _SYMB_2 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.TellRspPacket RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.Status p_4 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.Status)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBTellRspData(p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TellRspPacket",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TellReqPacket ::= _SYMB_0 _SYMB_18 _SYMB_4 _SYMB_6 Pattern _SYMB_1 Blob _SYMB_7 _SYMB_2 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.TellReqPacket RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.Pattern p_5 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.Blob p_7 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.Blob)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBTellReqData(p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TellReqPacket",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // AskRspPacket ::= _SYMB_0 _SYMB_17 _SYMB_4 _SYMB_6 Pattern _SYMB_1 Substitution _SYMB_1 Blob _SYMB_7 _SYMB_2 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.AskRspPacket RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.Pattern p_5 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.Substitution p_7 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.Substitution)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.Blob p_9 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.Blob)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBAskRspData(p_5,p_7,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AskRspPacket",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // AskReqPacket ::= _SYMB_0 _SYMB_16 _SYMB_4 Pattern _SYMB_2 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.AskReqPacket RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.Pattern p_4 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBAskReqData(p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AskReqPacket",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // KVDBResponse ::= _SYMB_6 _SYMB_0 _SYMB_15 _SYMB_4 _SYMB_39 _SYMB_2 _SYMB_7 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBResponse RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBNoRsp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("KVDBResponse",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // KVDBResponse ::= _SYMB_0 TellRsp _SYMB_4 TellRspPacket _SYMB_2 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBResponse RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.TellRsp p_2 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.TellRsp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.TellRspPacket p_4 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.TellRspPacket)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBTellRsp(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("KVDBResponse",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // KVDBResponse ::= _SYMB_0 AskRsp _SYMB_4 AskRspPacket _SYMB_2 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBResponse RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.AskRsp p_2 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.AskRsp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.AskRspPacket p_4 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.AskRspPacket)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBAskRsp(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("KVDBResponse",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // KVDBRequest ::= _SYMB_6 _SYMB_0 _SYMB_14 _SYMB_4 _SYMB_39 _SYMB_2 _SYMB_7 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBRequest RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBNoReq(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("KVDBRequest",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // KVDBRequest ::= _SYMB_0 TellReq _SYMB_4 TellReqPacket _SYMB_2 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBRequest RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.TellReq p_2 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.TellReq)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.TellReqPacket p_4 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.TellReqPacket)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBTellReq(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("KVDBRequest",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // KVDBRequest ::= _SYMB_0 AskReq _SYMB_4 AskReqPacket _SYMB_2 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBRequest RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.AskReq p_2 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.AskReq)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.AskReqPacket p_4 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.AskReqPacket)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBAskReq(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("KVDBRequest",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // RspHeader ::= _SYMB_6 _SYMB_0 _SYMB_13 _SYMB_4 UUID _SYMB_2 _SYMB_7 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.RspHeader RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.UUID p_5 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.UUID)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBRspUUIDHdr(p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RspHeader",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // RspHeader ::= _SYMB_6 _SYMB_0 _SYMB_12 _SYMB_4 URI _SYMB_2 _SYMB_7 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.RspHeader RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URI p_5 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBRspURIHdr(p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RspHeader",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // RspHeader ::= _SYMB_6 _SYMB_0 _SYMB_11 _SYMB_4 _SYMB_39 _SYMB_2 _SYMB_7 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.RspHeader RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBRspNoHdr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RspHeader",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // RspHeader ::= _SYMB_6 URI _SYMB_1 URI _SYMB_1 UUID _SYMB_1 UUID _SYMB_1 RspJust _SYMB_7 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.RspHeader RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URI p_2 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URI p_4 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.UUID p_6 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.UUID)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.UUID p_8 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.UUID)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.RspJust p_10 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.RspJust)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBRspHdr(p_2,p_4,p_6,p_8,p_10); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RspHeader",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ReqHeader ::= _SYMB_6 _SYMB_0 _SYMB_10 _SYMB_4 UUID _SYMB_2 _SYMB_7 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ReqHeader RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.UUID p_5 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.UUID)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBReqUUIDHdr(p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReqHeader",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ReqHeader ::= _SYMB_6 _SYMB_0 _SYMB_9 _SYMB_4 URI _SYMB_2 _SYMB_7 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ReqHeader RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URI p_5 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBReqURIHdr(p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReqHeader",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ReqHeader ::= _SYMB_6 _SYMB_0 _SYMB_8 _SYMB_4 _SYMB_39 _SYMB_2 _SYMB_7 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ReqHeader RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBReqNoHdr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReqHeader",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ReqHeader ::= _SYMB_6 URI _SYMB_1 URI _SYMB_1 UUID _SYMB_1 UUID _SYMB_1 ReqJust _SYMB_7 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ReqHeader RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URI p_2 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URI p_4 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.URI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.UUID p_6 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.UUID)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.UUID p_8 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.UUID)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ReqJust p_10 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ReqJust)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBReqHdr(p_2,p_4,p_6,p_8,p_10); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReqHeader",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LblRspBody ::= _SYMB_5 _SYMB_4 KVDBResponse 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.LblRspBody RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBResponse p_3 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBResponse)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBLblRspBody(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LblRspBody",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LblReqBody ::= _SYMB_5 _SYMB_4 KVDBRequest 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.LblReqBody RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBRequest p_3 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBRequest)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBLblReqBody(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LblReqBody",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LblRspHeader ::= _SYMB_3 _SYMB_4 RspHeader 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.LblRspHeader RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.RspHeader p_3 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.RspHeader)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBLblRspHdr(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LblRspHeader",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LblReqHeader ::= _SYMB_3 _SYMB_4 ReqHeader 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.LblReqHeader RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ReqHeader p_3 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.ReqHeader)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBLblReqHdr(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LblReqHeader",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Message ::= _SYMB_0 LblRspBody _SYMB_1 LblRspHeader _SYMB_2 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.Message RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.LblRspBody p_2 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.LblRspBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.LblRspHeader p_4 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.LblRspHeader)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBJustRspBH(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Message",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Message ::= _SYMB_0 LblRspHeader _SYMB_1 LblRspBody _SYMB_2 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.Message RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.LblRspHeader p_2 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.LblRspHeader)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.LblRspBody p_4 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.LblRspBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBJustRspHB(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Message",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Message ::= _SYMB_0 LblReqBody _SYMB_1 LblReqHeader _SYMB_2 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.Message RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.LblReqBody p_2 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.LblReqBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.LblReqHeader p_4 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.LblReqHeader)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBJustReqBH(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Message",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Message ::= _SYMB_0 LblReqHeader _SYMB_1 LblReqBody _SYMB_2 
            {
              com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.Message RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.LblReqHeader p_2 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.LblReqHeader)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.LblReqBody p_4 = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.LblReqBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.KVDBJustReqHB(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Message",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Message EOF 
            {
              Object RESULT =null;
		com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.Message start_val = (com.biosimilarity.lift.lib.amqpJSONAPI2.Absyn.Message)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

