// This JLex file was machine-generated by the BNF converter
package com.biosimilarity.lift.lib.amqpJSONAPI2;
import java_cup.runtime.*;


public class Yylex implements java_cup.runtime.Scanner {
	private final int YY_BUFFER_SIZE = 512;
	private final int YY_F = -1;
	private final int YY_NO_STATE = -1;
	private final int YY_NOT_ACCEPT = 0;
	private final int YY_START = 1;
	private final int YY_END = 2;
	private final int YY_NO_ANCHOR = 4;
	private final int YY_BOL = 65536;
	private final int YY_EOF = 65537;

  String pstring = new String();
  public int line_num() { return (yyline+1); }
  public String buff() { return new String(yy_buffer,yy_buffer_index,10).trim(); }
	private java.io.BufferedReader yy_reader;
	private int yy_buffer_index;
	private int yy_buffer_read;
	private int yy_buffer_start;
	private int yy_buffer_end;
	private char yy_buffer[];
	private int yyline;
	private boolean yy_at_bol;
	private int yy_lexical_state;

	public Yylex (java.io.Reader reader) {
		this ();
		if (null == reader) {
			throw (new Error("Error: Bad input stream initializer."));
		}
		yy_reader = new java.io.BufferedReader(reader);
	}

	public Yylex (java.io.InputStream instream) {
		this ();
		if (null == instream) {
			throw (new Error("Error: Bad input stream initializer."));
		}
		yy_reader = new java.io.BufferedReader(new java.io.InputStreamReader(instream));
	}

	private Yylex () {
		yy_buffer = new char[YY_BUFFER_SIZE];
		yy_buffer_read = 0;
		yy_buffer_index = 0;
		yy_buffer_start = 0;
		yy_buffer_end = 0;
		yyline = 0;
		yy_at_bol = true;
		yy_lexical_state = YYINITIAL;
	}

	private boolean yy_eof_done = false;
	private final int STRING = 5;
	private final int ESCAPED = 6;
	private final int YYINITIAL = 0;
	private final int COMMENT = 1;
	private final int CHAREND = 4;
	private final int CHARESC = 3;
	private final int CHAR = 2;
	private final int yy_state_dtrans[] = {
		0,
		199,
		199,
		199,
		199,
		200,
		201
	};
	private void yybegin (int state) {
		yy_lexical_state = state;
	}
	private int yy_advance ()
		throws java.io.IOException {
		int next_read;
		int i;
		int j;

		if (yy_buffer_index < yy_buffer_read) {
			return yy_buffer[yy_buffer_index++];
		}

		if (0 != yy_buffer_start) {
			i = yy_buffer_start;
			j = 0;
			while (i < yy_buffer_read) {
				yy_buffer[j] = yy_buffer[i];
				++i;
				++j;
			}
			yy_buffer_end = yy_buffer_end - yy_buffer_start;
			yy_buffer_start = 0;
			yy_buffer_read = j;
			yy_buffer_index = j;
			next_read = yy_reader.read(yy_buffer,
					yy_buffer_read,
					yy_buffer.length - yy_buffer_read);
			if (-1 == next_read) {
				return YY_EOF;
			}
			yy_buffer_read = yy_buffer_read + next_read;
		}

		while (yy_buffer_index >= yy_buffer_read) {
			if (yy_buffer_index >= yy_buffer.length) {
				yy_buffer = yy_double(yy_buffer);
			}
			next_read = yy_reader.read(yy_buffer,
					yy_buffer_read,
					yy_buffer.length - yy_buffer_read);
			if (-1 == next_read) {
				return YY_EOF;
			}
			yy_buffer_read = yy_buffer_read + next_read;
		}
		return yy_buffer[yy_buffer_index++];
	}
	private void yy_move_end () {
		if (yy_buffer_end > yy_buffer_start &&
		    '\n' == yy_buffer[yy_buffer_end-1])
			yy_buffer_end--;
		if (yy_buffer_end > yy_buffer_start &&
		    '\r' == yy_buffer[yy_buffer_end-1])
			yy_buffer_end--;
	}
	private boolean yy_last_was_cr=false;
	private void yy_mark_start () {
		int i;
		for (i = yy_buffer_start; i < yy_buffer_index; ++i) {
			if ('\n' == yy_buffer[i] && !yy_last_was_cr) {
				++yyline;
			}
			if ('\r' == yy_buffer[i]) {
				++yyline;
				yy_last_was_cr=true;
			} else yy_last_was_cr=false;
		}
		yy_buffer_start = yy_buffer_index;
	}
	private void yy_mark_end () {
		yy_buffer_end = yy_buffer_index;
	}
	private void yy_to_mark () {
		yy_buffer_index = yy_buffer_end;
		yy_at_bol = (yy_buffer_end > yy_buffer_start) &&
		            ('\r' == yy_buffer[yy_buffer_end-1] ||
		             '\n' == yy_buffer[yy_buffer_end-1] ||
		             2028/*LS*/ == yy_buffer[yy_buffer_end-1] ||
		             2029/*PS*/ == yy_buffer[yy_buffer_end-1]);
	}
	private java.lang.String yytext () {
		return (new java.lang.String(yy_buffer,
			yy_buffer_start,
			yy_buffer_end - yy_buffer_start));
	}
	private int yylength () {
		return yy_buffer_end - yy_buffer_start;
	}
	private char[] yy_double (char buf[]) {
		int i;
		char newbuf[];
		newbuf = new char[2*buf.length];
		for (i = 0; i < buf.length; ++i) {
			newbuf[i] = buf[i];
		}
		return newbuf;
	}
	private final int YY_E_INTERNAL = 0;
	private final int YY_E_MATCH = 1;
	private java.lang.String yy_error_string[] = {
		"Error: Internal error.\n",
		"Error: Unmatched input.\n"
	};
	private void yy_error (int code,boolean fatal) {
		java.lang.System.out.print(yy_error_string[code]);
		java.lang.System.out.flush();
		if (fatal) {
			throw new Error("Fatal Error.\n");
		}
	}
	private int[][] unpackFromString(int size1, int size2, String st) {
		int colonIndex = -1;
		String lengthString;
		int sequenceLength = 0;
		int sequenceInteger = 0;

		int commaIndex;
		String workString;

		int res[][] = new int[size1][size2];
		for (int i= 0; i < size1; i++) {
			for (int j= 0; j < size2; j++) {
				if (sequenceLength != 0) {
					res[i][j] = sequenceInteger;
					sequenceLength--;
					continue;
				}
				commaIndex = st.indexOf(',');
				workString = (commaIndex==-1) ? st :
					st.substring(0, commaIndex);
				st = st.substring(commaIndex+1);
				colonIndex = workString.indexOf(':');
				if (colonIndex == -1) {
					res[i][j]=Integer.parseInt(workString);
					continue;
				}
				lengthString =
					workString.substring(colonIndex+1);
				sequenceLength=Integer.parseInt(lengthString);
				workString=workString.substring(0,colonIndex);
				sequenceInteger=Integer.parseInt(workString);
				res[i][j] = sequenceInteger;
				sequenceLength--;
			}
		}
		return res;
	}
	private int yy_acpt[] = {
		/* 0 */ YY_NOT_ACCEPT,
		/* 1 */ YY_NO_ANCHOR,
		/* 2 */ YY_NO_ANCHOR,
		/* 3 */ YY_NO_ANCHOR,
		/* 4 */ YY_NO_ANCHOR,
		/* 5 */ YY_NO_ANCHOR,
		/* 6 */ YY_NO_ANCHOR,
		/* 7 */ YY_NO_ANCHOR,
		/* 8 */ YY_NO_ANCHOR,
		/* 9 */ YY_NO_ANCHOR,
		/* 10 */ YY_NO_ANCHOR,
		/* 11 */ YY_NO_ANCHOR,
		/* 12 */ YY_NO_ANCHOR,
		/* 13 */ YY_NO_ANCHOR,
		/* 14 */ YY_NO_ANCHOR,
		/* 15 */ YY_NO_ANCHOR,
		/* 16 */ YY_NO_ANCHOR,
		/* 17 */ YY_NO_ANCHOR,
		/* 18 */ YY_NO_ANCHOR,
		/* 19 */ YY_NO_ANCHOR,
		/* 20 */ YY_NO_ANCHOR,
		/* 21 */ YY_NO_ANCHOR,
		/* 22 */ YY_NO_ANCHOR,
		/* 23 */ YY_NO_ANCHOR,
		/* 24 */ YY_NO_ANCHOR,
		/* 25 */ YY_NO_ANCHOR,
		/* 26 */ YY_NO_ANCHOR,
		/* 27 */ YY_NO_ANCHOR,
		/* 28 */ YY_NO_ANCHOR,
		/* 29 */ YY_NO_ANCHOR,
		/* 30 */ YY_NO_ANCHOR,
		/* 31 */ YY_NO_ANCHOR,
		/* 32 */ YY_NO_ANCHOR,
		/* 33 */ YY_NO_ANCHOR,
		/* 34 */ YY_NO_ANCHOR,
		/* 35 */ YY_NO_ANCHOR,
		/* 36 */ YY_NO_ANCHOR,
		/* 37 */ YY_NO_ANCHOR,
		/* 38 */ YY_NO_ANCHOR,
		/* 39 */ YY_NO_ANCHOR,
		/* 40 */ YY_NO_ANCHOR,
		/* 41 */ YY_NO_ANCHOR,
		/* 42 */ YY_NO_ANCHOR,
		/* 43 */ YY_NO_ANCHOR,
		/* 44 */ YY_NO_ANCHOR,
		/* 45 */ YY_NO_ANCHOR,
		/* 46 */ YY_NO_ANCHOR,
		/* 47 */ YY_NO_ANCHOR,
		/* 48 */ YY_NO_ANCHOR,
		/* 49 */ YY_NO_ANCHOR,
		/* 50 */ YY_NO_ANCHOR,
		/* 51 */ YY_NO_ANCHOR,
		/* 52 */ YY_NO_ANCHOR,
		/* 53 */ YY_NO_ANCHOR,
		/* 54 */ YY_NO_ANCHOR,
		/* 55 */ YY_NO_ANCHOR,
		/* 56 */ YY_NO_ANCHOR,
		/* 57 */ YY_NO_ANCHOR,
		/* 58 */ YY_NO_ANCHOR,
		/* 59 */ YY_NOT_ACCEPT,
		/* 60 */ YY_NO_ANCHOR,
		/* 61 */ YY_NO_ANCHOR,
		/* 62 */ YY_NOT_ACCEPT,
		/* 63 */ YY_NO_ANCHOR,
		/* 64 */ YY_NOT_ACCEPT,
		/* 65 */ YY_NO_ANCHOR,
		/* 66 */ YY_NOT_ACCEPT,
		/* 67 */ YY_NOT_ACCEPT,
		/* 68 */ YY_NOT_ACCEPT,
		/* 69 */ YY_NOT_ACCEPT,
		/* 70 */ YY_NOT_ACCEPT,
		/* 71 */ YY_NOT_ACCEPT,
		/* 72 */ YY_NOT_ACCEPT,
		/* 73 */ YY_NOT_ACCEPT,
		/* 74 */ YY_NOT_ACCEPT,
		/* 75 */ YY_NOT_ACCEPT,
		/* 76 */ YY_NOT_ACCEPT,
		/* 77 */ YY_NOT_ACCEPT,
		/* 78 */ YY_NOT_ACCEPT,
		/* 79 */ YY_NOT_ACCEPT,
		/* 80 */ YY_NOT_ACCEPT,
		/* 81 */ YY_NOT_ACCEPT,
		/* 82 */ YY_NOT_ACCEPT,
		/* 83 */ YY_NOT_ACCEPT,
		/* 84 */ YY_NOT_ACCEPT,
		/* 85 */ YY_NOT_ACCEPT,
		/* 86 */ YY_NOT_ACCEPT,
		/* 87 */ YY_NOT_ACCEPT,
		/* 88 */ YY_NOT_ACCEPT,
		/* 89 */ YY_NOT_ACCEPT,
		/* 90 */ YY_NOT_ACCEPT,
		/* 91 */ YY_NOT_ACCEPT,
		/* 92 */ YY_NOT_ACCEPT,
		/* 93 */ YY_NOT_ACCEPT,
		/* 94 */ YY_NOT_ACCEPT,
		/* 95 */ YY_NOT_ACCEPT,
		/* 96 */ YY_NOT_ACCEPT,
		/* 97 */ YY_NOT_ACCEPT,
		/* 98 */ YY_NOT_ACCEPT,
		/* 99 */ YY_NOT_ACCEPT,
		/* 100 */ YY_NOT_ACCEPT,
		/* 101 */ YY_NOT_ACCEPT,
		/* 102 */ YY_NOT_ACCEPT,
		/* 103 */ YY_NOT_ACCEPT,
		/* 104 */ YY_NOT_ACCEPT,
		/* 105 */ YY_NOT_ACCEPT,
		/* 106 */ YY_NOT_ACCEPT,
		/* 107 */ YY_NOT_ACCEPT,
		/* 108 */ YY_NOT_ACCEPT,
		/* 109 */ YY_NOT_ACCEPT,
		/* 110 */ YY_NOT_ACCEPT,
		/* 111 */ YY_NOT_ACCEPT,
		/* 112 */ YY_NOT_ACCEPT,
		/* 113 */ YY_NOT_ACCEPT,
		/* 114 */ YY_NOT_ACCEPT,
		/* 115 */ YY_NOT_ACCEPT,
		/* 116 */ YY_NOT_ACCEPT,
		/* 117 */ YY_NOT_ACCEPT,
		/* 118 */ YY_NOT_ACCEPT,
		/* 119 */ YY_NOT_ACCEPT,
		/* 120 */ YY_NOT_ACCEPT,
		/* 121 */ YY_NOT_ACCEPT,
		/* 122 */ YY_NOT_ACCEPT,
		/* 123 */ YY_NOT_ACCEPT,
		/* 124 */ YY_NOT_ACCEPT,
		/* 125 */ YY_NOT_ACCEPT,
		/* 126 */ YY_NOT_ACCEPT,
		/* 127 */ YY_NOT_ACCEPT,
		/* 128 */ YY_NOT_ACCEPT,
		/* 129 */ YY_NOT_ACCEPT,
		/* 130 */ YY_NOT_ACCEPT,
		/* 131 */ YY_NOT_ACCEPT,
		/* 132 */ YY_NOT_ACCEPT,
		/* 133 */ YY_NOT_ACCEPT,
		/* 134 */ YY_NOT_ACCEPT,
		/* 135 */ YY_NOT_ACCEPT,
		/* 136 */ YY_NOT_ACCEPT,
		/* 137 */ YY_NOT_ACCEPT,
		/* 138 */ YY_NOT_ACCEPT,
		/* 139 */ YY_NOT_ACCEPT,
		/* 140 */ YY_NOT_ACCEPT,
		/* 141 */ YY_NOT_ACCEPT,
		/* 142 */ YY_NOT_ACCEPT,
		/* 143 */ YY_NOT_ACCEPT,
		/* 144 */ YY_NOT_ACCEPT,
		/* 145 */ YY_NOT_ACCEPT,
		/* 146 */ YY_NOT_ACCEPT,
		/* 147 */ YY_NOT_ACCEPT,
		/* 148 */ YY_NOT_ACCEPT,
		/* 149 */ YY_NOT_ACCEPT,
		/* 150 */ YY_NOT_ACCEPT,
		/* 151 */ YY_NOT_ACCEPT,
		/* 152 */ YY_NOT_ACCEPT,
		/* 153 */ YY_NOT_ACCEPT,
		/* 154 */ YY_NOT_ACCEPT,
		/* 155 */ YY_NOT_ACCEPT,
		/* 156 */ YY_NOT_ACCEPT,
		/* 157 */ YY_NOT_ACCEPT,
		/* 158 */ YY_NOT_ACCEPT,
		/* 159 */ YY_NOT_ACCEPT,
		/* 160 */ YY_NOT_ACCEPT,
		/* 161 */ YY_NOT_ACCEPT,
		/* 162 */ YY_NOT_ACCEPT,
		/* 163 */ YY_NOT_ACCEPT,
		/* 164 */ YY_NOT_ACCEPT,
		/* 165 */ YY_NOT_ACCEPT,
		/* 166 */ YY_NOT_ACCEPT,
		/* 167 */ YY_NOT_ACCEPT,
		/* 168 */ YY_NOT_ACCEPT,
		/* 169 */ YY_NOT_ACCEPT,
		/* 170 */ YY_NOT_ACCEPT,
		/* 171 */ YY_NOT_ACCEPT,
		/* 172 */ YY_NOT_ACCEPT,
		/* 173 */ YY_NOT_ACCEPT,
		/* 174 */ YY_NOT_ACCEPT,
		/* 175 */ YY_NOT_ACCEPT,
		/* 176 */ YY_NOT_ACCEPT,
		/* 177 */ YY_NOT_ACCEPT,
		/* 178 */ YY_NOT_ACCEPT,
		/* 179 */ YY_NOT_ACCEPT,
		/* 180 */ YY_NOT_ACCEPT,
		/* 181 */ YY_NOT_ACCEPT,
		/* 182 */ YY_NOT_ACCEPT,
		/* 183 */ YY_NOT_ACCEPT,
		/* 184 */ YY_NOT_ACCEPT,
		/* 185 */ YY_NOT_ACCEPT,
		/* 186 */ YY_NOT_ACCEPT,
		/* 187 */ YY_NOT_ACCEPT,
		/* 188 */ YY_NOT_ACCEPT,
		/* 189 */ YY_NOT_ACCEPT,
		/* 190 */ YY_NOT_ACCEPT,
		/* 191 */ YY_NOT_ACCEPT,
		/* 192 */ YY_NOT_ACCEPT,
		/* 193 */ YY_NOT_ACCEPT,
		/* 194 */ YY_NOT_ACCEPT,
		/* 195 */ YY_NOT_ACCEPT,
		/* 196 */ YY_NOT_ACCEPT,
		/* 197 */ YY_NOT_ACCEPT,
		/* 198 */ YY_NOT_ACCEPT,
		/* 199 */ YY_NOT_ACCEPT,
		/* 200 */ YY_NOT_ACCEPT,
		/* 201 */ YY_NOT_ACCEPT,
		/* 202 */ YY_NO_ANCHOR,
		/* 203 */ YY_NOT_ACCEPT,
		/* 204 */ YY_NOT_ACCEPT,
		/* 205 */ YY_NOT_ACCEPT,
		/* 206 */ YY_NOT_ACCEPT,
		/* 207 */ YY_NOT_ACCEPT,
		/* 208 */ YY_NOT_ACCEPT,
		/* 209 */ YY_NOT_ACCEPT,
		/* 210 */ YY_NOT_ACCEPT,
		/* 211 */ YY_NOT_ACCEPT,
		/* 212 */ YY_NOT_ACCEPT,
		/* 213 */ YY_NOT_ACCEPT,
		/* 214 */ YY_NOT_ACCEPT,
		/* 215 */ YY_NOT_ACCEPT,
		/* 216 */ YY_NOT_ACCEPT,
		/* 217 */ YY_NOT_ACCEPT,
		/* 218 */ YY_NOT_ACCEPT,
		/* 219 */ YY_NOT_ACCEPT,
		/* 220 */ YY_NOT_ACCEPT,
		/* 221 */ YY_NOT_ACCEPT,
		/* 222 */ YY_NOT_ACCEPT,
		/* 223 */ YY_NOT_ACCEPT,
		/* 224 */ YY_NOT_ACCEPT,
		/* 225 */ YY_NOT_ACCEPT,
		/* 226 */ YY_NOT_ACCEPT,
		/* 227 */ YY_NOT_ACCEPT,
		/* 228 */ YY_NOT_ACCEPT,
		/* 229 */ YY_NOT_ACCEPT,
		/* 230 */ YY_NOT_ACCEPT,
		/* 231 */ YY_NOT_ACCEPT,
		/* 232 */ YY_NOT_ACCEPT,
		/* 233 */ YY_NOT_ACCEPT,
		/* 234 */ YY_NOT_ACCEPT,
		/* 235 */ YY_NOT_ACCEPT,
		/* 236 */ YY_NOT_ACCEPT,
		/* 237 */ YY_NOT_ACCEPT,
		/* 238 */ YY_NO_ANCHOR,
		/* 239 */ YY_NOT_ACCEPT,
		/* 240 */ YY_NOT_ACCEPT,
		/* 241 */ YY_NOT_ACCEPT,
		/* 242 */ YY_NOT_ACCEPT,
		/* 243 */ YY_NOT_ACCEPT,
		/* 244 */ YY_NOT_ACCEPT,
		/* 245 */ YY_NOT_ACCEPT,
		/* 246 */ YY_NOT_ACCEPT,
		/* 247 */ YY_NOT_ACCEPT,
		/* 248 */ YY_NOT_ACCEPT,
		/* 249 */ YY_NOT_ACCEPT,
		/* 250 */ YY_NOT_ACCEPT,
		/* 251 */ YY_NOT_ACCEPT,
		/* 252 */ YY_NOT_ACCEPT,
		/* 253 */ YY_NOT_ACCEPT,
		/* 254 */ YY_NOT_ACCEPT,
		/* 255 */ YY_NO_ANCHOR,
		/* 256 */ YY_NOT_ACCEPT,
		/* 257 */ YY_NOT_ACCEPT,
		/* 258 */ YY_NOT_ACCEPT,
		/* 259 */ YY_NOT_ACCEPT,
		/* 260 */ YY_NOT_ACCEPT,
		/* 261 */ YY_NO_ANCHOR,
		/* 262 */ YY_NOT_ACCEPT,
		/* 263 */ YY_NOT_ACCEPT,
		/* 264 */ YY_NOT_ACCEPT,
		/* 265 */ YY_NOT_ACCEPT,
		/* 266 */ YY_NOT_ACCEPT,
		/* 267 */ YY_NOT_ACCEPT,
		/* 268 */ YY_NOT_ACCEPT,
		/* 269 */ YY_NOT_ACCEPT,
		/* 270 */ YY_NOT_ACCEPT,
		/* 271 */ YY_NOT_ACCEPT,
		/* 272 */ YY_NO_ANCHOR,
		/* 273 */ YY_NOT_ACCEPT,
		/* 274 */ YY_NO_ANCHOR,
		/* 275 */ YY_NO_ANCHOR,
		/* 276 */ YY_NOT_ACCEPT,
		/* 277 */ YY_NOT_ACCEPT,
		/* 278 */ YY_NOT_ACCEPT,
		/* 279 */ YY_NOT_ACCEPT,
		/* 280 */ YY_NOT_ACCEPT,
		/* 281 */ YY_NOT_ACCEPT,
		/* 282 */ YY_NOT_ACCEPT,
		/* 283 */ YY_NOT_ACCEPT,
		/* 284 */ YY_NOT_ACCEPT,
		/* 285 */ YY_NOT_ACCEPT,
		/* 286 */ YY_NOT_ACCEPT,
		/* 287 */ YY_NOT_ACCEPT,
		/* 288 */ YY_NOT_ACCEPT,
		/* 289 */ YY_NOT_ACCEPT,
		/* 290 */ YY_NOT_ACCEPT,
		/* 291 */ YY_NOT_ACCEPT,
		/* 292 */ YY_NOT_ACCEPT,
		/* 293 */ YY_NOT_ACCEPT,
		/* 294 */ YY_NOT_ACCEPT
	};
	private int yy_cmap[] = unpackFromString(1,65538,
"44:9,47,48,44,47,48,44:18,47,44,4,44,39,44:7,2,46,38,37,42:10,11,44:6,40,27" +
",40,26,20,40:2,23,25,40:8,18,40:2,24,40:5,15,45,16,44,43,44,7,12,32,8,6,35," +
"33,5,36,41,28,31,21,29,13,22,19,9,10,17,34,41,30,41,14,41,1,44,3,44:66,40:2" +
"3,44,40:7,41:24,44,41:8,44:65280,0:2")[0];

	private int yy_rmap[] = unpackFromString(1,295,
"0,1:4,2,3,1:3,4,1:2,5,6,1,7,1:2,3:2,1,3,1:36,8,9,10,11,12,13,14,15,16,17,18" +
",19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43" +
",44,45,46,47,48,10,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67" +
",68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92" +
",93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,1" +
"13,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131," +
"132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150" +
",151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,16" +
"9,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,1" +
"88,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206," +
"207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225" +
",226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242")[0];

	private int yy_nxt[][] = unpackFromString(243,49,
"1,2,3,4,5,6:6,7,6:3,8,9,261,10,6,10,6:2,10:5,6,272,6:5,275,6,11,12,-1,10,6," +
"13,14,-1:3,15:2,-1:54,59,-1,62,-1,203,64,-1,66,67,-1:3,239,-1:4,68,-1:6,204" +
",-1:3,256,-1,260,-1:3,69,-1:14,6:6,-1,6:3,-1:2,6:20,-1:3,6:4,-1:10,10:6,-1," +
"10:3,-1:2,10:20,-1:3,10:4,-1:43,70,-1:3,13,-1:7,14:47,-1:7,93,-1:35,16,-1:1" +
"2,71,-1:47,6,19,6:4,-1,6:3,-1:2,6:20,-1:3,6:4,-1:47,61,-1:16,205,-1:18,72,-" +
"1:2,241,-1:21,6:6,-1,6:3,-1:2,6:14,20,6:5,-1:3,6:4,-1:22,240,-1:16,74,-1:19" +
",6,22,6:4,-1,6:3,-1:2,6:20,-1:3,6:4,-1:18,75,-1:63,76,-1:54,78,-1:32,80,-1," +
"80,-1:2,80:5,-1:12,80,-1:50,16,-1:13,206,-1:51,82,-1:48,84,-1:8,85,-1:41,87" +
",-1:44,88,-1:44,17,-1:54,257,-1:20,89,-1:29,208,-1:4,90,-1:48,91,-1:35,18,8" +
"0:6,-1,80:3,-1:2,80:20,-1:3,80:4,-1:9,21,-1:74,262,-1:47,210,-1:41,243,-1:6" +
"0,212,-1:23,244,-1:49,211,-1:52,95,-1:65,96,-1:35,258,-1:43,98,-1:67,99,-1:" +
"58,61,-1:3,100,-1:8,101,-1:46,23,-1:48,24,-1:80,214,-1:40,108,-1:25,292,-1:" +
"52,246,-1:69,110,-1:47,259,-1:29,111,-1:56,112,-1:36,114,-1:3,115,-1:48,216" +
",-1:8,117,-1:33,25,-1:48,26,-1:75,215,-1:34,119,-1:37,120,-1:78,121,-1:31,1" +
"22,-1:51,293,-1:31,123,-1:77,125,-1:18,27,-1:48,28,-1:54,128,-1:8,129,-1:41" +
",217,-1:56,130,-1:3,131,-1:42,248,-1:43,132,-1:41,133,-1:50,134,-1:44,29,-1" +
":66,135,-1:60,136,-1:35,138,-1:45,139,-1:5,221,-1:53,219,-1:29,141,-1:71,24" +
"9,-1:28,143,-1:41,223,-1:60,144,-1:52,250,-1:51,145,-1:33,147,-1:8,148,-1:4" +
"6,149,-1:41,251,-1:67,225,-1:25,154,-1:65,156,-1:51,157,-1:44,158,-1:60,159" +
",-1:18,30,-1:48,31,-1:54,226,-1:42,32,-1:61,162,-1:41,163,-1:8,164,-1:43,16" +
"5,-1:42,166,-1:63,167,-1:38,168,-1:41,169,-1:46,33,-1:48,34,-1:48,35,-1:66," +
"173,-1:60,231,-1:37,273,-1:3,232,-1:30,174,-1:47,175,-1:69,230,-1:29,178,-1" +
":44,179,-1:46,36,-1:48,37,-1:57,180,-1:39,38,-1:53,182,-1:47,183,-1:44,39,-" +
"1:61,187,-1:35,40,-1:73,235,-1:29,188,-1:42,41,-1:53,236,-1:47,237,-1:44,42" +
",-1:50,191,-1:46,43,-1:61,193,-1:41,194,-1:52,195,-1:38,44,-1:50,198,-1:46," +
"45,-1:48,46,-1:48,47,-1:48,48,-1:48,49,-1:48,50,-1:44,1,-1:48,1,51:3,52,51:" +
"40,53,51:2,-1,1,54:3,55,54:12,56,54:11,57,54:15,58,54:2,-1:6,6:6,-1,6:3,-1:" +
"2,6:17,60,6:2,-1:3,6:4,-1:11,73,-1:55,79,-1:63,81,-1:28,94,-1:57,284,-1:62," +
"97,-1:35,106,-1:43,102,-1:67,245,-1:22,104,-1:51,109,-1:49,116,-1:44,126,-1" +
":64,124,-1:32,137,-1:71,142,-1:29,224,-1:44,151,-1:67,146,-1:40,150,-1:41,1" +
"53,-1:44,160,-1:52,227,-1:55,171,-1:37,172,-1:65,176,-1:3,253,-1:30,177,-1:" +
"49,186,-1:44,181,-1:55,234,-1:44,185,-1:47,190,-1:50,192,-1:48,196,-1:52,19" +
"7,-1:39,6:6,-1,6:3,-1:2,6:14,63,6:5,-1:3,6:4,-1:11,77,-1:55,86,-1:63,83,-1:" +
"37,92,-1:44,103,-1:41,105,-1:51,113,-1:49,118,-1:44,127,-1:48,140,-1:48,152" +
",-1:59,155,-1:37,161,-1:52,170,-1:51,184,-1:44,189,-1:44,6:5,65,-1,6:3,-1:2" +
",6:20,-1:3,6:4,-1:11,207,-1:59,209,-1:37,107,-1:52,247,-1:44,242,-1:47,6:4," +
"202,6,-1,6:3,-1:2,6:20,-1:3,6:4,-1:11,213,-1:55,218,-1:69,220,-1:24,222,-1:" +
"67,252,-1:33,228,-1:42,229,-1:48,233,-1:62,263,-1:43,267,-1:36,6:6,-1,6:3,-" +
"1:2,6:17,238,6:2,-1:3,6:4,-1:13,254,-1:45,6:6,-1,6:3,-1:2,6:14,255,6:5,-1:3" +
",6:4,-1:10,6:2,274,6:3,-1,6:3,-1:2,6:20,-1:3,6:4,-1:15,270,-1:8,286,-1:39,2" +
"87,-1:8,264,-1:35,265,-1:55,266,-1:57,271,-1:49,268,-1:48,269,-1:31,276,-1:" +
"60,283,-1:36,277,-1:76,278,-1:36,279,-1:47,280,-1:52,281,-1:49,282,-1:47,29" +
"0,-1:41,285,-1:50,288,-1:3,294,-1:42,289,-1:5,291,-1:24");

	public java_cup.runtime.Symbol next_token ()
		throws java.io.IOException {
		int yy_lookahead;
		int yy_anchor = YY_NO_ANCHOR;
		int yy_state = yy_state_dtrans[yy_lexical_state];
		int yy_next_state = YY_NO_STATE;
		int yy_last_accept_state = YY_NO_STATE;
		boolean yy_initial = true;
		int yy_this_accept;

		yy_mark_start();
		yy_this_accept = yy_acpt[yy_state];
		if (YY_NOT_ACCEPT != yy_this_accept) {
			yy_last_accept_state = yy_state;
			yy_mark_end();
		}
		while (true) {
			if (yy_initial && yy_at_bol) yy_lookahead = YY_BOL;
			else yy_lookahead = yy_advance();
			yy_next_state = YY_F;
			yy_next_state = yy_nxt[yy_rmap[yy_state]][yy_cmap[yy_lookahead]];
			if (YY_EOF == yy_lookahead && true == yy_initial) {
				return null;
			}
			if (YY_F != yy_next_state) {
				yy_state = yy_next_state;
				yy_initial = false;
				yy_this_accept = yy_acpt[yy_state];
				if (YY_NOT_ACCEPT != yy_this_accept) {
					yy_last_accept_state = yy_state;
					yy_mark_end();
				}
			}
			else {
				if (YY_NO_STATE == yy_last_accept_state) {
					throw (new Error("Lexical Error: Unmatched Input."));
				}
				else {
					yy_anchor = yy_acpt[yy_last_accept_state];
					if (0 != (YY_END & yy_anchor)) {
						yy_move_end();
					}
					yy_to_mark();
					switch (yy_last_accept_state) {
					case 1:
						
					case -2:
						break;
					case 2:
						{ return new Symbol(sym._SYMB_0); }
					case -3:
						break;
					case 3:
						{ return new Symbol(sym._SYMB_1); }
					case -4:
						break;
					case 4:
						{ return new Symbol(sym._SYMB_2); }
					case -5:
						break;
					case 5:
						{ yybegin(STRING); }
					case -6:
						break;
					case 6:
						{ return new Symbol(sym.LIdent, yytext().intern()); }
					case -7:
						break;
					case 7:
						{ return new Symbol(sym._SYMB_4); }
					case -8:
						break;
					case 8:
						{ return new Symbol(sym._SYMB_6); }
					case -9:
						break;
					case 9:
						{ return new Symbol(sym._SYMB_7); }
					case -10:
						break;
					case 10:
						{ return new Symbol(sym.UIdent, yytext().intern()); }
					case -11:
						break;
					case 11:
						{ return new Symbol(sym._SYMB_36); }
					case -12:
						break;
					case 12:
						{ return new Symbol(sym._SYMB_37); }
					case -13:
						break;
					case 13:
						{ return new Symbol(sym._INTEGER_, new Integer(yytext())); }
					case -14:
						break;
					case 14:
						{ return new Symbol(sym.Wild, yytext().intern()); }
					case -15:
						break;
					case 15:
						{ /* ignore white space. */ }
					case -16:
						break;
					case 16:
						{ return new Symbol(sym._DOUBLE_, new Double(yytext())); }
					case -17:
						break;
					case 17:
						{ return new Symbol(sym._SYMB_34); }
					case -18:
						break;
					case 18:
						{ return new Symbol(sym.VarUIdent, yytext().intern()); }
					case -19:
						break;
					case 19:
						{ return new Symbol(sym._SYMB_40); }
					case -20:
						break;
					case 20:
						{ return new Symbol(sym._SYMB_39); }
					case -21:
						break;
					case 21:
						{ return new Symbol(sym._SYMB_16); }
					case -22:
						break;
					case 22:
						{ return new Symbol(sym._SYMB_38); }
					case -23:
						break;
					case 23:
						{ return new Symbol(sym._SYMB_5); }
					case -24:
						break;
					case 24:
						{ return new Symbol(sym._SYMB_18); }
					case -25:
						break;
					case 25:
						{ return new Symbol(sym._SYMB_35); }
					case -26:
						break;
					case 26:
						{ return new Symbol(sym._SYMB_17); }
					case -27:
						break;
					case 27:
						{ return new Symbol(sym._SYMB_3); }
					case -28:
						break;
					case 28:
						{ return new Symbol(sym._SYMB_21); }
					case -29:
						break;
					case 29:
						{ return new Symbol(sym._SYMB_20); }
					case -30:
						break;
					case 30:
						{ return new Symbol(sym._SYMB_25); }
					case -31:
						break;
					case 31:
						{ return new Symbol(sym._SYMB_22); }
					case -32:
						break;
					case 32:
						{ return new Symbol(sym._SYMB_19); }
					case -33:
						break;
					case 33:
						{ return new Symbol(sym._SYMB_31); }
					case -34:
						break;
					case 34:
						{ return new Symbol(sym._SYMB_28); }
					case -35:
						break;
					case 35:
						{ return new Symbol(sym._SYMB_26); }
					case -36:
						break;
					case 36:
						{ return new Symbol(sym._SYMB_23); }
					case -37:
						break;
					case 37:
						{ return new Symbol(sym._SYMB_32); }
					case -38:
						break;
					case 38:
						{ return new Symbol(sym._SYMB_9); }
					case -39:
						break;
					case 39:
						{ return new Symbol(sym._SYMB_12); }
					case -40:
						break;
					case 40:
						{ return new Symbol(sym._SYMB_29); }
					case -41:
						break;
					case 41:
						{ return new Symbol(sym._SYMB_10); }
					case -42:
						break;
					case 42:
						{ return new Symbol(sym._SYMB_13); }
					case -43:
						break;
					case 43:
						{ return new Symbol(sym._SYMB_27); }
					case -44:
						break;
					case 44:
						{ return new Symbol(sym._SYMB_33); }
					case -45:
						break;
					case 45:
						{ return new Symbol(sym._SYMB_24); }
					case -46:
						break;
					case 46:
						{ return new Symbol(sym._SYMB_8); }
					case -47:
						break;
					case 47:
						{ return new Symbol(sym._SYMB_14); }
					case -48:
						break;
					case 48:
						{ return new Symbol(sym._SYMB_11); }
					case -49:
						break;
					case 49:
						{ return new Symbol(sym._SYMB_15); }
					case -50:
						break;
					case 50:
						{ return new Symbol(sym._SYMB_30); }
					case -51:
						break;
					case 51:
						{ pstring += yytext(); }
					case -52:
						break;
					case 52:
						{ String foo = pstring; pstring = new String(); yybegin(YYINITIAL); return new Symbol(sym._STRING_, foo.intern()); }
					case -53:
						break;
					case 53:
						{ yybegin(ESCAPED); }
					case -54:
						break;
					case 54:
						{ pstring += yytext(); yybegin(STRING); }
					case -55:
						break;
					case 55:
						{ pstring += "\""; yybegin(STRING); }
					case -56:
						break;
					case 56:
						{ pstring += "\t"; yybegin(STRING); }
					case -57:
						break;
					case 57:
						{ pstring +=  "\n"; yybegin(STRING); }
					case -58:
						break;
					case 58:
						{ pstring += "\\"; yybegin(STRING); }
					case -59:
						break;
					case 60:
						{ return new Symbol(sym.LIdent, yytext().intern()); }
					case -60:
						break;
					case 61:
						{ return new Symbol(sym._DOUBLE_, new Double(yytext())); }
					case -61:
						break;
					case 63:
						{ return new Symbol(sym.LIdent, yytext().intern()); }
					case -62:
						break;
					case 65:
						{ return new Symbol(sym.LIdent, yytext().intern()); }
					case -63:
						break;
					case 202:
						{ return new Symbol(sym.LIdent, yytext().intern()); }
					case -64:
						break;
					case 238:
						{ return new Symbol(sym.LIdent, yytext().intern()); }
					case -65:
						break;
					case 255:
						{ return new Symbol(sym.LIdent, yytext().intern()); }
					case -66:
						break;
					case 261:
						{ return new Symbol(sym.LIdent, yytext().intern()); }
					case -67:
						break;
					case 272:
						{ return new Symbol(sym.LIdent, yytext().intern()); }
					case -68:
						break;
					case 274:
						{ return new Symbol(sym.LIdent, yytext().intern()); }
					case -69:
						break;
					case 275:
						{ return new Symbol(sym.LIdent, yytext().intern()); }
					case -70:
						break;
					default:
						yy_error(YY_E_INTERNAL,false);
					case -1:
					}
					yy_initial = true;
					yy_state = yy_state_dtrans[yy_lexical_state];
					yy_next_state = YY_NO_STATE;
					yy_last_accept_state = YY_NO_STATE;
					yy_mark_start();
					yy_this_accept = yy_acpt[yy_state];
					if (YY_NOT_ACCEPT != yy_this_accept) {
						yy_last_accept_state = yy_state;
						yy_mark_end();
					}
				}
			}
		}
	}
}
