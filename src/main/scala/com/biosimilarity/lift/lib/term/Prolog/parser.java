
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Apr 02 12:55:13 PDT 2013
//----------------------------------------------------

package com.biosimilarity.lift.lib.term.Prolog;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Apr 02 12:55:13 PDT 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\026\000\002\002\004\000\002\002\003\000\002\002" +
    "\006\000\002\003\003\000\002\003\003\000\002\003\006" +
    "\000\002\003\003\000\002\004\003\000\002\004\005\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\005\003\000\002\005\003\000\002\006\004\000\002\006" +
    "\005\000\002\006\007\000\002\006\007\000\002\007\003" +
    "\000\002\007\005\000\002\010\003\000\002\010\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\042\000\014\006\006\013\005\014\011\015\012\020" +
    "\010\001\002\000\004\002\044\001\002\000\016\002\ufff8" +
    "\004\ufff8\005\ufff8\010\ufff8\011\ufff8\012\ufff8\001\002\000" +
    "\004\016\042\001\002\000\006\002\000\004\013\001\002" +
    "\000\016\002\ufffa\004\ufffa\005\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\001\002\000\016\002\ufff7\004\ufff7\005\ufff7\010\ufff7" +
    "\011\ufff7\012\ufff7\001\002\000\016\002\ufff6\004\ufff6\005" +
    "\ufff6\010\ufff6\011\ufff6\012\ufff6\001\002\000\022\006\006" +
    "\007\016\013\005\014\011\015\012\017\017\020\010\021" +
    "\015\001\002\000\004\005\041\001\002\000\012\005\ufff4" +
    "\010\ufff4\011\ufff4\012\ufff4\001\002\000\024\006\006\007" +
    "\016\010\032\013\005\014\011\015\012\017\017\020\010" +
    "\021\015\001\002\000\012\005\ufff5\010\ufff5\011\ufff5\012" +
    "\ufff5\001\002\000\012\005\ufffb\010\ufffb\011\ufffb\012\ufffb" +
    "\001\002\000\012\005\uffed\010\uffed\011\uffed\012\027\001" +
    "\002\000\014\004\024\005\ufffe\010\ufffe\011\ufffe\012\ufffe" +
    "\001\002\000\012\005\ufffd\010\ufffd\011\ufffd\012\ufffd\001" +
    "\002\000\022\006\006\007\016\013\005\014\011\015\012" +
    "\017\017\020\010\021\015\001\002\000\004\005\026\001" +
    "\002\000\012\005\ufffc\010\ufffc\011\ufffc\012\ufffc\001\002" +
    "\000\022\006\006\007\016\013\005\014\011\015\012\017" +
    "\017\020\010\021\015\001\002\000\010\005\uffec\010\uffec" +
    "\011\uffec\001\002\000\006\010\033\011\034\001\002\000" +
    "\012\005\ufff3\010\ufff3\011\ufff3\012\ufff3\001\002\000\012" +
    "\005\ufff2\010\ufff2\011\ufff2\012\ufff2\001\002\000\010\007" +
    "\016\017\017\021\015\001\002\000\004\010\040\001\002" +
    "\000\004\010\037\001\002\000\012\005\ufff0\010\ufff0\011" +
    "\ufff0\012\ufff0\001\002\000\012\005\ufff1\010\ufff1\011\ufff1" +
    "\012\ufff1\001\002\000\004\002\uffff\001\002\000\004\006" +
    "\043\001\002\000\016\002\ufff9\004\ufff9\005\ufff9\010\ufff9" +
    "\011\ufff9\012\ufff9\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\042\000\006\002\003\004\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\020\004\021\005\022\006\017\010\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\020\004" +
    "\021\005\022\006\017\010\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\020\004\021\005\022\006\017" +
    "\010\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\020\004\021\005\022\006\017\010\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\035\006\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public com.biosimilarity.lift.lib.term.Prolog.Absyn.Predicate pPredicate() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (com.biosimilarity.lift.lib.term.Prolog.Absyn.Predicate) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ListTerm ::= Term _SYMB_6 ListTerm 
            {
              com.biosimilarity.lift.lib.term.Prolog.Absyn.ListTerm RESULT =null;
		com.biosimilarity.lift.lib.term.Prolog.Absyn.Term p_1 = (com.biosimilarity.lift.lib.term.Prolog.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.lib.term.Prolog.Absyn.ListTerm p_3 = (com.biosimilarity.lift.lib.term.Prolog.Absyn.ListTerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTerm",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ListTerm ::= Term 
            {
              com.biosimilarity.lift.lib.term.Prolog.Absyn.ListTerm RESULT =null;
		com.biosimilarity.lift.lib.term.Prolog.Absyn.Term p_1 = (com.biosimilarity.lift.lib.term.Prolog.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.ListTerm(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTerm",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ListPredicate ::= Predicate _SYMB_6 ListPredicate 
            {
              com.biosimilarity.lift.lib.term.Prolog.Absyn.ListPredicate RESULT =null;
		com.biosimilarity.lift.lib.term.Prolog.Absyn.Predicate p_1 = (com.biosimilarity.lift.lib.term.Prolog.Absyn.Predicate)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.lib.term.Prolog.Absyn.ListPredicate p_3 = (com.biosimilarity.lift.lib.term.Prolog.Absyn.ListPredicate)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPredicate",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ListPredicate ::= Predicate 
            {
              com.biosimilarity.lift.lib.term.Prolog.Absyn.ListPredicate RESULT =null;
		com.biosimilarity.lift.lib.term.Prolog.Absyn.Predicate p_1 = (com.biosimilarity.lift.lib.term.Prolog.Absyn.Predicate)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.ListPredicate(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPredicate",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Lyst ::= _SYMB_3 ListTerm _SYMB_5 Var _SYMB_4 
            {
              com.biosimilarity.lift.lib.term.Prolog.Absyn.Lyst RESULT =null;
		com.biosimilarity.lift.lib.term.Prolog.Absyn.ListTerm p_2 = (com.biosimilarity.lift.lib.term.Prolog.Absyn.ListTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.biosimilarity.lift.lib.term.Prolog.Absyn.Var p_4 = (com.biosimilarity.lift.lib.term.Prolog.Absyn.Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.ConsV(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lyst",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Lyst ::= _SYMB_3 ListTerm _SYMB_5 Lyst _SYMB_4 
            {
              com.biosimilarity.lift.lib.term.Prolog.Absyn.Lyst RESULT =null;
		com.biosimilarity.lift.lib.term.Prolog.Absyn.ListTerm p_2 = (com.biosimilarity.lift.lib.term.Prolog.Absyn.ListTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.biosimilarity.lift.lib.term.Prolog.Absyn.Lyst p_4 = (com.biosimilarity.lift.lib.term.Prolog.Absyn.Lyst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.Cons(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lyst",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Lyst ::= _SYMB_3 ListTerm _SYMB_4 
            {
              com.biosimilarity.lift.lib.term.Prolog.Absyn.Lyst RESULT =null;
		com.biosimilarity.lift.lib.term.Prolog.Absyn.ListTerm p_2 = (com.biosimilarity.lift.lib.term.Prolog.Absyn.ListTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.Enum(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lyst",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Lyst ::= _SYMB_3 _SYMB_4 
            {
              com.biosimilarity.lift.lib.term.Prolog.Absyn.Lyst RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.Empty(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lyst",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Var ::= Wild 
            {
              com.biosimilarity.lift.lib.term.Prolog.Absyn.Var RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.A(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Var ::= UIdent 
            {
              com.biosimilarity.lift.lib.term.Prolog.Absyn.Var RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.V(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Atom ::= _DOUBLE_ 
            {
              com.biosimilarity.lift.lib.term.Prolog.Absyn.Atom RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.FltAtm(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Atom",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Atom ::= _INTEGER_ 
            {
              com.biosimilarity.lift.lib.term.Prolog.Absyn.Atom RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.IntAtm(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Atom",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Atom ::= _STRING_ 
            {
              com.biosimilarity.lift.lib.term.Prolog.Absyn.Atom RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.StrAtm(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Atom",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Atom ::= _SYMB_2 _IDENT_ _SYMB_2 
            {
              com.biosimilarity.lift.lib.term.Prolog.Absyn.Atom RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.EAtm(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Atom",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Atom ::= LIdent 
            {
              com.biosimilarity.lift.lib.term.Prolog.Absyn.Atom RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.Atm(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Atom",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Term ::= Lyst 
            {
              com.biosimilarity.lift.lib.term.Prolog.Absyn.Term RESULT =null;
		com.biosimilarity.lift.lib.term.Prolog.Absyn.Lyst p_1 = (com.biosimilarity.lift.lib.term.Prolog.Absyn.Lyst)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.TList(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Term ::= Atom _SYMB_0 ListTerm _SYMB_1 
            {
              com.biosimilarity.lift.lib.term.Prolog.Absyn.Term RESULT =null;
		com.biosimilarity.lift.lib.term.Prolog.Absyn.Atom p_1 = (com.biosimilarity.lift.lib.term.Prolog.Absyn.Atom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.biosimilarity.lift.lib.term.Prolog.Absyn.ListTerm p_3 = (com.biosimilarity.lift.lib.term.Prolog.Absyn.ListTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.Complex(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Term ::= Var 
            {
              com.biosimilarity.lift.lib.term.Prolog.Absyn.Term RESULT =null;
		com.biosimilarity.lift.lib.term.Prolog.Absyn.Var p_1 = (com.biosimilarity.lift.lib.term.Prolog.Absyn.Var)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.VarT(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Term ::= Atom 
            {
              com.biosimilarity.lift.lib.term.Prolog.Absyn.Term RESULT =null;
		com.biosimilarity.lift.lib.term.Prolog.Absyn.Atom p_1 = (com.biosimilarity.lift.lib.term.Prolog.Absyn.Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.TAtom(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Predicate ::= Atom _SYMB_0 ListTerm _SYMB_1 
            {
              com.biosimilarity.lift.lib.term.Prolog.Absyn.Predicate RESULT =null;
		com.biosimilarity.lift.lib.term.Prolog.Absyn.Atom p_1 = (com.biosimilarity.lift.lib.term.Prolog.Absyn.Atom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.biosimilarity.lift.lib.term.Prolog.Absyn.ListTerm p_3 = (com.biosimilarity.lift.lib.term.Prolog.Absyn.ListTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.CPred(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Predicate",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Predicate ::= Atom 
            {
              com.biosimilarity.lift.lib.term.Prolog.Absyn.Predicate RESULT =null;
		com.biosimilarity.lift.lib.term.Prolog.Absyn.Atom p_1 = (com.biosimilarity.lift.lib.term.Prolog.Absyn.Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.term.Prolog.Absyn.APred(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Predicate",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Predicate EOF 
            {
              Object RESULT =null;
		com.biosimilarity.lift.lib.term.Prolog.Absyn.Predicate start_val = (com.biosimilarity.lift.lib.term.Prolog.Absyn.Predicate)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

