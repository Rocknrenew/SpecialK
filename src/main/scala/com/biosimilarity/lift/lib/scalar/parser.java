
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 08 22:38:46 PST 2012
//----------------------------------------------------

package com.biosimilarity.lift.lib.scalar;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 08 22:38:46 PST 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\004\000\002\002\005\000\002\002" +
    "\002\000\002\002\010\000\002\003\006\000\002\003\011" +
    "\000\002\003\003\000\002\003\003\000\002\003\005\000" +
    "\002\004\003\000\002\004\006\000\002\005\005\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\006" +
    "\005\000\002\007\005\000\002\007\003\000\002\010\004" +
    "\000\002\010\003\000\002\011\010\000\002\011\003\000" +
    "\002\011\003\000\002\012\003\000\002\013\003\000\002" +
    "\013\003\000\002\014\003\000\002\014\003\000\002\015" +
    "\002\000\002\015\003\000\002\015\005\000\002\016\002" +
    "\000\002\016\003\000\002\016\005\000\002\017\002\000" +
    "\002\017\003\000\002\017\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\034\002\uffff\006\025\011\024\013\023\016" +
    "\022\022\021\024\016\025\014\026\013\027\006\030\004" +
    "\031\020\032\012\001\002\000\022\004\uffe8\006\uffe8\007" +
    "\uffe8\015\uffe8\017\uffe8\020\uffe8\021\uffe8\023\uffe8\001\002" +
    "\000\016\004\ufffa\006\ufffa\007\ufffa\015\ufffa\017\ufffa\023" +
    "\ufffa\001\002\000\022\004\ufff3\006\ufff3\007\ufff3\015\ufff3" +
    "\017\ufff3\020\ufff3\021\ufff3\023\ufff3\001\002\000\022\004" +
    "\uffee\006\uffee\007\uffee\015\uffee\017\uffee\020\uffee\021\uffee" +
    "\023\uffee\001\002\000\022\004\ufff0\006\ufff0\007\ufff0\015" +
    "\ufff0\017\ufff0\020\ufff0\021\ufff0\023\ufff0\001\002\000\006" +
    "\020\uffea\021\077\001\002\000\024\004\ufff8\005\ufff8\006" +
    "\ufff8\007\ufff8\015\ufff8\017\ufff8\020\ufff8\021\ufff8\023\ufff8" +
    "\001\002\000\006\013\023\032\012\001\002\000\022\004" +
    "\uffe7\006\uffe7\007\uffe7\015\uffe7\017\uffe7\020\uffe7\021\uffe7" +
    "\023\uffe7\001\002\000\004\020\075\001\002\000\022\004" +
    "\uffe6\006\uffe6\007\uffe6\015\uffe6\017\uffe6\020\uffe6\021\uffe6" +
    "\023\uffe6\001\002\000\022\004\ufff5\006\ufff5\007\ufff5\015" +
    "\ufff5\017\ufff5\020\ufff5\021\ufff5\023\ufff5\001\002\000\022" +
    "\004\uffe9\006\uffe9\007\uffe9\015\uffe9\017\uffe9\020\uffe9\021" +
    "\uffe9\023\uffe9\001\002\000\024\006\073\013\023\016\022" +
    "\024\016\025\014\027\006\030\004\031\020\032\012\001" +
    "\002\000\032\006\025\011\024\013\023\016\022\017\uffe2" +
    "\022\021\024\016\025\014\027\006\030\004\031\020\032" +
    "\012\001\002\000\004\014\065\001\002\000\034\006\025" +
    "\011\024\012\uffff\013\023\016\022\022\021\024\016\025" +
    "\014\026\013\027\006\030\004\031\020\032\012\001\002" +
    "\000\032\006\025\007\uffe5\011\024\013\023\016\022\022" +
    "\021\024\016\025\014\027\006\030\004\031\020\032\012" +
    "\001\002\000\022\004\ufffb\006\ufffb\007\ufffb\015\ufffb\017" +
    "\ufffb\020\uffec\021\uffec\023\ufffb\001\002\000\022\004\uffeb" +
    "\006\uffeb\007\uffeb\015\uffeb\017\uffeb\020\uffeb\021\uffeb\023" +
    "\uffeb\001\002\000\022\004\ufff4\006\ufff4\007\ufff4\015\ufff4" +
    "\017\ufff4\020\ufff4\021\ufff4\023\ufff4\001\002\000\004\002" +
    "\043\001\002\000\006\004\034\006\033\001\002\000\032" +
    "\006\025\007\uffe2\011\024\013\023\016\022\022\021\024" +
    "\016\025\014\027\006\030\004\031\020\032\012\001\002" +
    "\000\036\002\uffff\006\025\011\024\012\uffff\013\023\016" +
    "\022\022\021\024\016\025\014\026\013\027\006\030\004" +
    "\031\020\032\012\001\002\000\006\002\000\012\000\001" +
    "\002\000\004\007\042\001\002\000\012\006\033\007\uffe1" +
    "\017\uffe1\023\040\001\002\000\034\006\025\007\uffe2\011" +
    "\024\013\023\016\022\017\uffe2\022\021\024\016\025\014" +
    "\027\006\030\004\031\020\032\012\001\002\000\006\007" +
    "\uffe0\017\uffe0\001\002\000\016\004\ufffd\006\ufffd\007\ufffd" +
    "\015\ufffd\017\ufffd\023\ufffd\001\002\000\004\002\001\001" +
    "\002\000\014\006\ufffb\007\uffe4\020\uffec\021\uffec\023\060" +
    "\001\002\000\004\007\053\001\002\000\004\006\047\001" +
    "\002\000\032\006\025\007\uffe2\011\024\013\023\016\022" +
    "\022\021\024\016\025\014\027\006\030\004\031\020\032" +
    "\012\001\002\000\004\007\051\001\002\000\006\006\ufffd" +
    "\007\052\001\002\000\022\004\uffed\006\uffed\007\uffed\015" +
    "\uffed\017\uffed\020\uffed\021\uffed\023\uffed\001\002\000\004" +
    "\010\054\001\002\000\004\011\055\001\002\000\034\006" +
    "\025\011\024\012\uffff\013\023\016\022\022\021\024\016" +
    "\025\014\026\013\027\006\030\004\031\020\032\012\001" +
    "\002\000\004\012\057\001\002\000\016\004\ufffc\006\ufffc" +
    "\007\ufffc\015\ufffc\017\ufffc\023\ufffc\001\002\000\010\007" +
    "\uffe5\013\023\032\012\001\002\000\006\007\uffe4\023\060" +
    "\001\002\000\004\007\uffe3\001\002\000\004\012\064\001" +
    "\002\000\016\004\ufff9\006\ufff9\007\ufff9\015\ufff9\017\ufff9" +
    "\023\ufff9\001\002\000\030\006\025\011\024\013\023\016" +
    "\022\022\021\024\016\025\014\027\006\030\004\031\020" +
    "\032\012\001\002\000\006\006\033\015\067\001\002\000" +
    "\024\004\ufff7\005\ufff7\006\ufff7\007\ufff7\015\ufff7\017\ufff7" +
    "\020\ufff7\021\ufff7\023\ufff7\001\002\000\004\017\071\001" +
    "\002\000\022\004\ufff6\006\ufff6\007\ufff6\015\ufff6\017\ufff6" +
    "\020\ufff6\021\ufff6\023\ufff6\001\002\000\022\004\uffec\006" +
    "\uffec\007\uffec\015\uffec\017\uffec\020\uffec\021\uffec\023\uffec" +
    "\001\002\000\030\006\025\011\024\013\023\016\022\022" +
    "\021\024\016\025\014\027\006\030\004\031\020\032\012" +
    "\001\002\000\022\004\uffef\006\uffef\007\uffef\015\uffef\017" +
    "\uffef\020\uffef\021\uffef\023\uffef\001\002\000\026\006\073" +
    "\013\023\016\022\022\021\024\016\025\014\027\006\030" +
    "\004\031\020\032\012\001\002\000\020\004\ufff2\006\ufff2" +
    "\007\ufff2\015\ufff2\017\ufff2\021\077\023\ufff2\001\002\000" +
    "\026\006\073\013\023\016\022\022\021\024\016\025\014" +
    "\027\006\030\004\031\020\032\012\001\002\000\022\004" +
    "\ufff1\006\ufff1\007\ufff1\015\ufff1\017\ufff1\020\ufff1\021\ufff1" +
    "\023\ufff1\001\002\000\004\005\102\001\002\000\030\006" +
    "\025\011\024\013\023\016\022\022\021\024\016\025\014" +
    "\027\006\030\004\031\020\032\012\001\002\000\006\004" +
    "\104\006\033\001\002\000\036\002\uffff\006\025\011\024" +
    "\012\uffff\013\023\016\022\022\021\024\016\025\014\026" +
    "\013\027\006\030\004\031\020\032\012\001\002\000\006" +
    "\002\ufffe\012\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\030\002\030\003\031\004\025\005\026\006" +
    "\004\007\010\010\007\011\006\012\014\013\016\014\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\071\005\026\011\073\013" +
    "\016\014\027\001\001\000\030\003\036\004\025\005\026" +
    "\006\004\007\010\010\007\011\006\012\014\013\016\014" +
    "\027\016\067\001\001\000\002\001\001\000\030\002\062" +
    "\003\031\004\025\005\026\006\004\007\010\010\007\011" +
    "\006\012\014\013\016\014\027\001\001\000\030\003\045" +
    "\004\043\005\026\006\004\007\010\010\007\011\006\012" +
    "\014\013\016\014\027\015\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\036\004\025\005\026\006\004" +
    "\007\010\010\007\011\006\012\014\013\016\014\027\016" +
    "\035\001\001\000\030\002\034\003\031\004\025\005\026" +
    "\006\004\007\010\010\007\011\006\012\014\013\016\014" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\036\004\025\005\026\006\004\007" +
    "\010\010\007\011\006\012\014\013\016\014\027\016\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\036\004\025\005\026\006\004\007\010\010" +
    "\007\011\006\012\014\013\016\014\027\016\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\002\055\003\031" +
    "\004\025\005\026\006\004\007\010\010\007\011\006\012" +
    "\014\013\016\014\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\060\015\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\065\004\025\005\026\006\004\007\010\010" +
    "\007\011\006\012\014\013\016\014\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\003\045\004\025\005\026" +
    "\006\004\007\010\010\007\011\006\012\014\013\016\014" +
    "\027\001\001\000\002\001\001\000\020\004\071\005\026" +
    "\007\075\010\007\011\006\013\016\014\027\001\001\000" +
    "\002\001\001\000\016\004\071\005\026\010\077\011\006" +
    "\013\016\014\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\003\102\004\025\005\026\006\004\007\010" +
    "\010\007\011\006\012\014\013\016\014\027\001\001\000" +
    "\002\001\001\000\030\002\104\003\031\004\025\005\026" +
    "\006\004\007\010\010\007\011\006\012\014\013\016\014" +
    "\027\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public com.biosimilarity.lift.lib.scalar.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (com.biosimilarity.lift.lib.scalar.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ListExpression1 ::= Expression _SYMB_0 ListExpression1 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.ListExpression RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.Expression p_1 = (com.biosimilarity.lift.lib.scalar.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.lib.scalar.Absyn.ListExpression p_3 = (com.biosimilarity.lift.lib.scalar.Absyn.ListExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpression1",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ListExpression1 ::= Expression 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.ListExpression RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.Expression p_1 = (com.biosimilarity.lift.lib.scalar.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.ListExpression(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpression1",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ListExpression1 ::= 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.ListExpression RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.ListExpression(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpression1",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ListExpression ::= Expression _SYMB_15 ListExpression 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.ListExpression RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.Expression p_1 = (com.biosimilarity.lift.lib.scalar.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.lib.scalar.Absyn.ListExpression p_3 = (com.biosimilarity.lift.lib.scalar.Absyn.ListExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpression",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ListExpression ::= Expression 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.ListExpression RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.Expression p_1 = (com.biosimilarity.lift.lib.scalar.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.ListExpression(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpression",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ListExpression ::= 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.ListExpression RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.ListExpression(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpression",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ListVariableExpr ::= VariableExpr _SYMB_15 ListVariableExpr 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.ListVariableExpr RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.VariableExpr p_1 = (com.biosimilarity.lift.lib.scalar.Absyn.VariableExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.lib.scalar.Absyn.ListVariableExpr p_3 = (com.biosimilarity.lift.lib.scalar.Absyn.ListVariableExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVariableExpr",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ListVariableExpr ::= VariableExpr 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.ListVariableExpr RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.VariableExpr p_1 = (com.biosimilarity.lift.lib.scalar.Absyn.VariableExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.ListVariableExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVariableExpr",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ListVariableExpr ::= 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.ListVariableExpr RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.ListVariableExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVariableExpr",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Logical ::= _SYMB_16 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.Logical RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Absurdity(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Logical",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Logical ::= _SYMB_17 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.Logical RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Verity(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Logical",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Numeric ::= _INTEGER_ 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.Numeric RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Count(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Numeric",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Numeric ::= _DOUBLE_ 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.Numeric RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Measure(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Numeric",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ArithmeticExpr ::= ArithmeticExpr1 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.ArithmeticExpr RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.ArithmeticExpr p_1 = (com.biosimilarity.lift.lib.scalar.Absyn.ArithmeticExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithmeticExpr",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ArithmeticExpr3 ::= ValueExpr 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.ArithmeticExpr RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.ValueExpr p_1 = (com.biosimilarity.lift.lib.scalar.Absyn.ValueExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Value(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithmeticExpr3",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ArithmeticExpr3 ::= VariableExpr 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.ArithmeticExpr RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.VariableExpr p_1 = (com.biosimilarity.lift.lib.scalar.Absyn.VariableExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Variation(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithmeticExpr3",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ArithmeticExpr3 ::= _SYMB_2 Expression _SYMB_2 ListExpression _SYMB_3 _SYMB_3 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.ArithmeticExpr RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.Expression p_2 = (com.biosimilarity.lift.lib.scalar.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		com.biosimilarity.lift.lib.scalar.Absyn.ListExpression p_4 = (com.biosimilarity.lift.lib.scalar.Absyn.ListExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Reduction(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithmeticExpr3",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ArithmeticExpr2 ::= ArithmeticExpr3 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.ArithmeticExpr RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.ArithmeticExpr p_1 = (com.biosimilarity.lift.lib.scalar.Absyn.ArithmeticExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithmeticExpr2",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ArithmeticExpr2 ::= _SYMB_14 ArithmeticExpr3 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.ArithmeticExpr RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.ArithmeticExpr p_2 = (com.biosimilarity.lift.lib.scalar.Absyn.ArithmeticExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Negation(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithmeticExpr2",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ArithmeticExpr1 ::= ArithmeticExpr2 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.ArithmeticExpr RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.ArithmeticExpr p_1 = (com.biosimilarity.lift.lib.scalar.Absyn.ArithmeticExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithmeticExpr1",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ArithmeticExpr1 ::= ArithmeticExpr1 _SYMB_13 ArithmeticExpr2 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.ArithmeticExpr RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.ArithmeticExpr p_1 = (com.biosimilarity.lift.lib.scalar.Absyn.ArithmeticExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.lib.scalar.Absyn.ArithmeticExpr p_3 = (com.biosimilarity.lift.lib.scalar.Absyn.ArithmeticExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Multiplication(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithmeticExpr1",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ArithemeticExpr ::= ArithmeticExpr _SYMB_12 ArithmeticExpr1 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.ArithemeticExpr RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.ArithmeticExpr p_1 = (com.biosimilarity.lift.lib.scalar.Absyn.ArithmeticExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.lib.scalar.Absyn.ArithmeticExpr p_3 = (com.biosimilarity.lift.lib.scalar.Absyn.ArithmeticExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Summation(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithemeticExpr",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ValueExpr ::= _STRING_ 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.ValueExpr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Utterance(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueExpr",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ValueExpr ::= Logical 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.ValueExpr RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.Logical p_1 = (com.biosimilarity.lift.lib.scalar.Absyn.Logical)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Quality(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueExpr",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ValueExpr ::= Numeric 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.ValueExpr RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.Numeric p_1 = (com.biosimilarity.lift.lib.scalar.Absyn.Numeric)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Quantity(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueExpr",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ValueExpr ::= _SYMB_10 ListExpression _SYMB_11 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.ValueExpr RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.ListExpression p_2 = (com.biosimilarity.lift.lib.scalar.Absyn.ListExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Listed(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueExpr",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VariableExpr ::= _SYMB_7 _SYMB_8 Expression _SYMB_9 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.VariableExpr RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.Expression p_3 = (com.biosimilarity.lift.lib.scalar.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Transcription(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableExpr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VariableExpr ::= _IDENT_ 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.VariableExpr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Atom(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableExpr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Expression ::= _SYMB_5 Program _SYMB_6 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.Expression RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.Program p_2 = (com.biosimilarity.lift.lib.scalar.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Embedding(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Expression ::= ArithemeticExpr 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.Expression RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.ArithemeticExpr p_1 = (com.biosimilarity.lift.lib.scalar.Absyn.ArithemeticExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Calculation(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Expression ::= VariableExpr 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.Expression RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.VariableExpr p_1 = (com.biosimilarity.lift.lib.scalar.Absyn.VariableExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Mention(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Expression ::= _SYMB_2 ListVariableExpr _SYMB_3 _SYMB_4 _SYMB_5 Program _SYMB_6 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.Expression RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.ListVariableExpr p_2 = (com.biosimilarity.lift.lib.scalar.Absyn.ListVariableExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		com.biosimilarity.lift.lib.scalar.Absyn.Program p_6 = (com.biosimilarity.lift.lib.scalar.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Abstraction(p_2,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Expression ::= Expression _SYMB_2 ListExpression _SYMB_3 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.Expression RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.Expression p_1 = (com.biosimilarity.lift.lib.scalar.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.biosimilarity.lift.lib.scalar.Absyn.ListExpression p_3 = (com.biosimilarity.lift.lib.scalar.Absyn.ListExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Application(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= _SYMB_18 VariableExpr _SYMB_1 Expression _SYMB_0 Program 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.Program RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.VariableExpr p_2 = (com.biosimilarity.lift.lib.scalar.Absyn.VariableExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		com.biosimilarity.lift.lib.scalar.Absyn.Expression p_4 = (com.biosimilarity.lift.lib.scalar.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.lib.scalar.Absyn.Program p_6 = (com.biosimilarity.lift.lib.scalar.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Binding(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.Program RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Completion(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= Expression _SYMB_0 Program 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.Program RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.Expression p_1 = (com.biosimilarity.lift.lib.scalar.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.lib.scalar.Absyn.Program p_3 = (com.biosimilarity.lift.lib.scalar.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Progression(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.Program start_val = (com.biosimilarity.lift.lib.scalar.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

