
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 08 10:17:04 PST 2012
//----------------------------------------------------

package com.biosimilarity.lift.lib.scalar;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 08 10:17:04 PST 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\004\000\002\002\005\000\002\002" +
    "\002\000\002\002\010\000\002\003\006\000\002\003\011" +
    "\000\002\003\003\000\002\003\003\000\002\003\005\000" +
    "\002\004\003\000\002\004\006\000\002\005\005\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\006" +
    "\003\000\002\006\003\000\002\007\003\000\002\007\003" +
    "\000\002\010\002\000\002\010\003\000\002\010\005\000" +
    "\002\011\002\000\002\011\003\000\002\011\005\000\002" +
    "\012\002\000\002\012\003\000\002\012\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\060\000\032\002\uffff\006\011\011\007\013\004\016" +
    "\023\021\021\022\015\023\014\024\017\025\022\026\024" +
    "\027\020\001\002\000\004\014\060\001\002\000\004\002" +
    "\057\001\002\000\016\004\ufffb\006\ufffb\007\ufffb\015\ufffb" +
    "\017\ufffb\020\ufffb\001\002\000\032\006\011\011\007\012" +
    "\uffff\013\004\016\023\021\021\022\015\023\014\024\017" +
    "\025\022\026\024\027\020\001\002\000\016\004\ufff5\006" +
    "\ufff5\007\ufff5\015\ufff5\017\ufff5\020\ufff5\001\002\000\010" +
    "\007\uffee\013\004\027\020\001\002\000\006\004\042\006" +
    "\027\001\002\000\016\004\ufff4\006\ufff4\007\ufff4\015\ufff4" +
    "\017\ufff4\020\ufff4\001\002\000\006\013\004\027\020\001" +
    "\002\000\016\004\ufff0\006\ufff0\007\ufff0\015\ufff0\017\ufff0" +
    "\020\ufff0\001\002\000\016\004\ufffa\006\ufffa\007\ufffa\015" +
    "\ufffa\017\ufffa\020\ufffa\001\002\000\016\004\ufff3\006\ufff3" +
    "\007\ufff3\015\ufff3\017\ufff3\020\ufff3\001\002\000\020\004" +
    "\ufff8\005\ufff8\006\ufff8\007\ufff8\015\ufff8\017\ufff8\020\ufff8" +
    "\001\002\000\016\004\uffef\006\uffef\007\uffef\015\uffef\017" +
    "\uffef\020\uffef\001\002\000\016\004\ufff1\006\ufff1\007\ufff1" +
    "\015\ufff1\017\ufff1\020\ufff1\001\002\000\030\006\011\011" +
    "\007\013\004\016\023\017\uffeb\021\021\022\015\024\017" +
    "\025\022\026\024\027\020\001\002\000\016\004\ufff2\006" +
    "\ufff2\007\ufff2\015\ufff2\017\ufff2\020\ufff2\001\002\000\004" +
    "\017\034\001\002\000\012\006\027\007\uffea\017\uffea\020" +
    "\030\001\002\000\030\006\011\007\uffeb\011\007\013\004" +
    "\016\023\021\021\022\015\024\017\025\022\026\024\027" +
    "\020\001\002\000\032\006\011\007\uffeb\011\007\013\004" +
    "\016\023\017\uffeb\021\021\022\015\024\017\025\022\026" +
    "\024\027\020\001\002\000\006\007\uffe9\017\uffe9\001\002" +
    "\000\004\007\033\001\002\000\016\004\ufffd\006\ufffd\007" +
    "\ufffd\015\ufffd\017\ufffd\020\ufffd\001\002\000\016\004\ufff6" +
    "\006\ufff6\007\ufff6\015\ufff6\017\ufff6\020\ufff6\001\002\000" +
    "\004\005\036\001\002\000\026\006\011\011\007\013\004" +
    "\016\023\021\021\022\015\024\017\025\022\026\024\027" +
    "\020\001\002\000\006\004\040\006\027\001\002\000\034" +
    "\002\uffff\006\011\011\007\012\uffff\013\004\016\023\021" +
    "\021\022\015\023\014\024\017\025\022\026\024\027\020" +
    "\001\002\000\006\002\ufffe\012\ufffe\001\002\000\034\002" +
    "\uffff\006\011\011\007\012\uffff\013\004\016\023\021\021" +
    "\022\015\023\014\024\017\025\022\026\024\027\020\001" +
    "\002\000\006\002\000\012\000\001\002\000\006\007\uffed" +
    "\020\053\001\002\000\004\007\046\001\002\000\004\010" +
    "\047\001\002\000\004\011\050\001\002\000\032\006\011" +
    "\011\007\012\uffff\013\004\016\023\021\021\022\015\023" +
    "\014\024\017\025\022\026\024\027\020\001\002\000\004" +
    "\012\052\001\002\000\016\004\ufffc\006\ufffc\007\ufffc\015" +
    "\ufffc\017\ufffc\020\ufffc\001\002\000\010\007\uffee\013\004" +
    "\027\020\001\002\000\004\007\uffec\001\002\000\004\012" +
    "\056\001\002\000\016\004\ufff9\006\ufff9\007\ufff9\015\ufff9" +
    "\017\ufff9\020\ufff9\001\002\000\004\002\001\001\002\000" +
    "\026\006\011\011\007\013\004\016\023\021\021\022\015" +
    "\024\017\025\022\026\024\027\020\001\002\000\006\006" +
    "\027\015\062\001\002\000\020\004\ufff7\005\ufff7\006\ufff7" +
    "\007\ufff7\015\ufff7\017\ufff7\020\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\060\000\016\002\004\003\011\004\005\005\015\006" +
    "\007\007\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\002\054\003\011\004\005\005" +
    "\015\006\007\007\012\001\001\000\002\001\001\000\006" +
    "\004\043\010\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\025\004\005\005\015" +
    "\006\007\007\012\011\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\025\004\005" +
    "\005\015\006\007\007\012\011\031\001\001\000\016\003" +
    "\025\004\005\005\015\006\007\007\012\011\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\036\004\005" +
    "\005\015\006\007\007\012\001\001\000\002\001\001\000" +
    "\016\002\040\003\011\004\005\005\015\006\007\007\012" +
    "\001\001\000\002\001\001\000\016\002\042\003\011\004" +
    "\005\005\015\006\007\007\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\002\050\003\011\004\005\005\015" +
    "\006\007\007\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\043\010\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\060\004\005\005\015\006\007\007\012\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public com.biosimilarity.lift.lib.scalar.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (com.biosimilarity.lift.lib.scalar.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ListExpression1 ::= Expression _SYMB_0 ListExpression1 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.ListExpression RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.Expression p_1 = (com.biosimilarity.lift.lib.scalar.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.lib.scalar.Absyn.ListExpression p_3 = (com.biosimilarity.lift.lib.scalar.Absyn.ListExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpression1",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ListExpression1 ::= Expression 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.ListExpression RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.Expression p_1 = (com.biosimilarity.lift.lib.scalar.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.ListExpression(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpression1",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ListExpression1 ::= 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.ListExpression RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.ListExpression(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpression1",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ListExpression ::= Expression _SYMB_12 ListExpression 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.ListExpression RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.Expression p_1 = (com.biosimilarity.lift.lib.scalar.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.lib.scalar.Absyn.ListExpression p_3 = (com.biosimilarity.lift.lib.scalar.Absyn.ListExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpression",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ListExpression ::= Expression 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.ListExpression RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.Expression p_1 = (com.biosimilarity.lift.lib.scalar.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.ListExpression(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpression",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ListExpression ::= 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.ListExpression RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.ListExpression(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpression",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ListVariableExpr ::= VariableExpr _SYMB_12 ListVariableExpr 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.ListVariableExpr RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.VariableExpr p_1 = (com.biosimilarity.lift.lib.scalar.Absyn.VariableExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.lib.scalar.Absyn.ListVariableExpr p_3 = (com.biosimilarity.lift.lib.scalar.Absyn.ListVariableExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVariableExpr",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ListVariableExpr ::= VariableExpr 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.ListVariableExpr RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.VariableExpr p_1 = (com.biosimilarity.lift.lib.scalar.Absyn.VariableExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.ListVariableExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVariableExpr",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ListVariableExpr ::= 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.ListVariableExpr RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.ListVariableExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVariableExpr",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Bool ::= _SYMB_13 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.Bool RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Absurdity(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bool",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Bool ::= _SYMB_14 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.Bool RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Verity(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bool",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Numeric ::= _INTEGER_ 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.Numeric RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Count(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Numeric",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Numeric ::= _DOUBLE_ 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.Numeric RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Measure(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Numeric",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ValueExpr ::= _STRING_ 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.ValueExpr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Utterance(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueExpr",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ValueExpr ::= Bool 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.ValueExpr RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.Bool p_1 = (com.biosimilarity.lift.lib.scalar.Absyn.Bool)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Quality(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueExpr",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ValueExpr ::= Numeric 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.ValueExpr RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.Numeric p_1 = (com.biosimilarity.lift.lib.scalar.Absyn.Numeric)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Quantity(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueExpr",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ValueExpr ::= _SYMB_10 ListExpression _SYMB_11 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.ValueExpr RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.ListExpression p_2 = (com.biosimilarity.lift.lib.scalar.Absyn.ListExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Listed(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueExpr",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VariableExpr ::= _SYMB_7 _SYMB_8 Expression _SYMB_9 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.VariableExpr RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.Expression p_3 = (com.biosimilarity.lift.lib.scalar.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Transcription(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableExpr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VariableExpr ::= _IDENT_ 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.VariableExpr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Atom(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableExpr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Expression ::= _SYMB_5 Program _SYMB_6 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.Expression RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.Program p_2 = (com.biosimilarity.lift.lib.scalar.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Embedding(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Expression ::= ValueExpr 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.Expression RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.ValueExpr p_1 = (com.biosimilarity.lift.lib.scalar.Absyn.ValueExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Value(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Expression ::= VariableExpr 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.Expression RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.VariableExpr p_1 = (com.biosimilarity.lift.lib.scalar.Absyn.VariableExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Mention(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Expression ::= _SYMB_2 ListVariableExpr _SYMB_3 _SYMB_4 _SYMB_5 Program _SYMB_6 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.Expression RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.ListVariableExpr p_2 = (com.biosimilarity.lift.lib.scalar.Absyn.ListVariableExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		com.biosimilarity.lift.lib.scalar.Absyn.Program p_6 = (com.biosimilarity.lift.lib.scalar.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Abstraction(p_2,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Expression ::= Expression _SYMB_2 ListExpression _SYMB_3 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.Expression RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.Expression p_1 = (com.biosimilarity.lift.lib.scalar.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.biosimilarity.lift.lib.scalar.Absyn.ListExpression p_3 = (com.biosimilarity.lift.lib.scalar.Absyn.ListExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Application(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= _SYMB_15 VariableExpr _SYMB_1 Expression _SYMB_0 Program 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.Program RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.VariableExpr p_2 = (com.biosimilarity.lift.lib.scalar.Absyn.VariableExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		com.biosimilarity.lift.lib.scalar.Absyn.Expression p_4 = (com.biosimilarity.lift.lib.scalar.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.lib.scalar.Absyn.Program p_6 = (com.biosimilarity.lift.lib.scalar.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Binding(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.Program RESULT =null;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Completion(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= Expression _SYMB_0 Program 
            {
              com.biosimilarity.lift.lib.scalar.Absyn.Program RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.Expression p_1 = (com.biosimilarity.lift.lib.scalar.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.biosimilarity.lift.lib.scalar.Absyn.Program p_3 = (com.biosimilarity.lift.lib.scalar.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Progression(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		com.biosimilarity.lift.lib.scalar.Absyn.Program start_val = (com.biosimilarity.lift.lib.scalar.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

