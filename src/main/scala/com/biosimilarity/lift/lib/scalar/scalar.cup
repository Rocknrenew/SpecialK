// -*- Java -*- This Cup file was machine-generated by BNFC
package com.biosimilarity.lift.lib.scalar;

parser code {:
  public com.biosimilarity.lift.lib.scalar.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (com.biosimilarity.lift.lib.scalar.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal com.biosimilarity.lift.lib.scalar.Absyn.Program Program;
nonterminal com.biosimilarity.lift.lib.scalar.Absyn.Expression Expression;
nonterminal com.biosimilarity.lift.lib.scalar.Absyn.VariableExpr VariableExpr;
nonterminal com.biosimilarity.lift.lib.scalar.Absyn.ValueExpr ValueExpr;
nonterminal com.biosimilarity.lift.lib.scalar.Absyn.Numeric Numeric;
nonterminal com.biosimilarity.lift.lib.scalar.Absyn.Bool Bool;
nonterminal com.biosimilarity.lift.lib.scalar.Absyn.ListVariableExpr ListVariableExpr;
nonterminal com.biosimilarity.lift.lib.scalar.Absyn.ListExpression ListExpression;
nonterminal com.biosimilarity.lift.lib.scalar.Absyn.ListExpression ListExpression1;

terminal _SYMB_0;    //   ;
terminal _SYMB_1;    //   =
terminal _SYMB_2;    //   (
terminal _SYMB_3;    //   )
terminal _SYMB_4;    //   =>
terminal _SYMB_5;    //   {
terminal _SYMB_6;    //   }
terminal _SYMB_7;    //   @
terminal _SYMB_8;    //   <
terminal _SYMB_9;    //   >
terminal _SYMB_10;    //   [
terminal _SYMB_11;    //   ]
terminal _SYMB_12;    //   ,
terminal _SYMB_13;    //   false
terminal _SYMB_14;    //   true
terminal _SYMB_15;    //   val

terminal String _STRING_;

terminal Integer _INTEGER_;
terminal Double _DOUBLE_;
terminal String _IDENT_;



start with Program;


Program ::= Expression:p_1 _SYMB_0 Program:p_3  {: RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Progression(p_1,p_3); :} 
  |  /* empty */  {: RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Completion(); :}
  | _SYMB_15 VariableExpr:p_2 _SYMB_1 Expression:p_4 _SYMB_0 Program:p_6  {: RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Binding(p_2,p_4,p_6); :}
;
Expression ::= Expression:p_1 _SYMB_2 ListExpression:p_3 _SYMB_3  {: RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Application(p_1,p_3); :} 
  | _SYMB_2 ListVariableExpr:p_2 _SYMB_3 _SYMB_4 _SYMB_5 Program:p_6 _SYMB_6  {: RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Abstraction(p_2,p_6); :}
  | VariableExpr:p_1  {: RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Mention(p_1); :}
  | ValueExpr:p_1  {: RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Value(p_1); :}
  | _SYMB_5 Program:p_2 _SYMB_6  {: RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Embedding(p_2); :}
;
VariableExpr ::= _IDENT_:p_1  {: RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Atom(p_1); :} 
  | _SYMB_7 _SYMB_8 Expression:p_3 _SYMB_9  {: RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Transcription(p_3); :}
;
ValueExpr ::= _SYMB_10 ListExpression:p_2 _SYMB_11  {: RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Listed(p_2); :} 
  | Numeric:p_1  {: RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Quantity(p_1); :}
  | Bool:p_1  {: RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Quality(p_1); :}
  | _STRING_:p_1  {: RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Utterance(p_1); :}
;
Numeric ::= _DOUBLE_:p_1  {: RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Measure(p_1); :} 
  | _INTEGER_:p_1  {: RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Count(p_1); :}
;
Bool ::= _SYMB_14  {: RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Verity(); :} 
  | _SYMB_13  {: RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.Absurdity(); :}
;
ListVariableExpr ::=  /* empty */  {: RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.ListVariableExpr(); :} 
  | VariableExpr:p_1  {: RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.ListVariableExpr(); RESULT.addLast(p_1); :}
  | VariableExpr:p_1 _SYMB_12 ListVariableExpr:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListExpression ::=  /* empty */  {: RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.ListExpression(); :} 
  | Expression:p_1  {: RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.ListExpression(); RESULT.addLast(p_1); :}
  | Expression:p_1 _SYMB_12 ListExpression:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListExpression1 ::=  /* empty */  {: RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.ListExpression(); :} 
  | Expression:p_1  {: RESULT = new com.biosimilarity.lift.lib.scalar.Absyn.ListExpression(); RESULT.addLast(p_1); :}
  | Expression:p_1 _SYMB_0 ListExpression1:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;

